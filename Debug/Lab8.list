
Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba4  08004ba4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bac  08004bac  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000078  08004c2c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004c2c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c653  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ccf  00000000  00000000  0002c6fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002e3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001728b  00000000  00000000  0002fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e2a  00000000  00000000  00046e53  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008df23  00000000  00000000  0004fc7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ddba0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  000ddc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004950 	.word	0x08004950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004950 	.word	0x08004950

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b08f      	sub	sp, #60	; 0x3c
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fd6b 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f9cd 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 faab 	bl	8000af8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 fa7f 	bl	8000aa4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005a6:	f000 fa31 	bl	8000a0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  {
  	  //�?ำหนดข้อความ
  	  char temp[]="HELLO WORLD\r\n please type something to START UART\r\n";
 80005aa:	4bb0      	ldr	r3, [pc, #704]	; (800086c <main+0x2dc>)
 80005ac:	463c      	mov	r4, r7
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	682b      	ldr	r3, [r5, #0]
 80005be:	6023      	str	r3, [r4, #0]
  	  //ไม่ใส่ (uint8_t*) ได้�?ต่ขึ้น warning //1000 ms= timeout ถ้าเ�?ินจา�?นี้จะ fail
  	  HAL_UART_Transmit(&huart2, (uint8_t*) temp, strlen(temp), 1000); //polling
 80005c0:	463b      	mov	r3, r7
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe0c 	bl	80001e0 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4639      	mov	r1, r7
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	48a7      	ldr	r0, [pc, #668]	; (8000870 <main+0x2e0>)
 80005d4:	f002 f905 	bl	80027e2 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart2,  (uint8_t*)RxDataBuffer, 32);
 80005d8:	2220      	movs	r2, #32
 80005da:	49a6      	ldr	r1, [pc, #664]	; (8000874 <main+0x2e4>)
 80005dc:	48a4      	ldr	r0, [pc, #656]	; (8000870 <main+0x2e0>)
 80005de:	f002 f9de 	bl	800299e <HAL_UART_Receive_IT>
	  int16_t inputchar = UARTRecieveIT();
 80005e2:	f000 faf9 	bl	8000bd8 <UARTRecieveIT>
 80005e6:	4603      	mov	r3, r0
 80005e8:	86fb      	strh	r3, [r7, #54]	; 0x36
	  if(inputchar!=-1)
 80005ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80005ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f2:	d0f1      	beq.n	80005d8 <main+0x48>
	  {
		  sprintf(TxDataBuffer, "ReceivedChar:[%c]\r\n", inputchar);
 80005f4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80005f8:	461a      	mov	r2, r3
 80005fa:	499f      	ldr	r1, [pc, #636]	; (8000878 <main+0x2e8>)
 80005fc:	489f      	ldr	r0, [pc, #636]	; (800087c <main+0x2ec>)
 80005fe:	f003 f8e1 	bl	80037c4 <siprintf>
	  	  HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
 8000602:	489e      	ldr	r0, [pc, #632]	; (800087c <main+0x2ec>)
 8000604:	f7ff fdec 	bl	80001e0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000610:	499a      	ldr	r1, [pc, #616]	; (800087c <main+0x2ec>)
 8000612:	4897      	ldr	r0, [pc, #604]	; (8000870 <main+0x2e0>)
 8000614:	f002 f8e5 	bl	80027e2 <HAL_UART_Transmit>
	  	  switch(STATE_Display)
 8000618:	4b99      	ldr	r3, [pc, #612]	; (8000880 <main+0x2f0>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b1f      	cmp	r3, #31
 800061e:	d8db      	bhi.n	80005d8 <main+0x48>
 8000620:	a201      	add	r2, pc, #4	; (adr r2, 8000628 <main+0x98>)
 8000622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000626:	bf00      	nop
 8000628:	080006a9 	.word	0x080006a9
 800062c:	080005d9 	.word	0x080005d9
 8000630:	080005d9 	.word	0x080005d9
 8000634:	080005d9 	.word	0x080005d9
 8000638:	080005d9 	.word	0x080005d9
 800063c:	080005d9 	.word	0x080005d9
 8000640:	080005d9 	.word	0x080005d9
 8000644:	080005d9 	.word	0x080005d9
 8000648:	080005d9 	.word	0x080005d9
 800064c:	080005d9 	.word	0x080005d9
 8000650:	080006b7 	.word	0x080006b7
 8000654:	080006e3 	.word	0x080006e3
 8000658:	080005d9 	.word	0x080005d9
 800065c:	080005d9 	.word	0x080005d9
 8000660:	080005d9 	.word	0x080005d9
 8000664:	080005d9 	.word	0x080005d9
 8000668:	080005d9 	.word	0x080005d9
 800066c:	080005d9 	.word	0x080005d9
 8000670:	080005d9 	.word	0x080005d9
 8000674:	080005d9 	.word	0x080005d9
 8000678:	08000717 	.word	0x08000717
 800067c:	08000761 	.word	0x08000761
 8000680:	080005d9 	.word	0x080005d9
 8000684:	080005d9 	.word	0x080005d9
 8000688:	080005d9 	.word	0x080005d9
 800068c:	080005d9 	.word	0x080005d9
 8000690:	080005d9 	.word	0x080005d9
 8000694:	080005d9 	.word	0x080005d9
 8000698:	080005d9 	.word	0x080005d9
 800069c:	080005d9 	.word	0x080005d9
 80006a0:	08000813 	.word	0x08000813
 80006a4:	0800084b 	.word	0x0800084b
	  		{
	  	  	  case StateDisplay_Start:
	  	  		  printf("Frequency default is 1 Hz\r\n");
 80006a8:	4876      	ldr	r0, [pc, #472]	; (8000884 <main+0x2f4>)
 80006aa:	f003 f883 	bl	80037b4 <puts>
	  	  		  STATE_Display = StateDisplay_MenuRoot_Print;
 80006ae:	4b74      	ldr	r3, [pc, #464]	; (8000880 <main+0x2f0>)
 80006b0:	220a      	movs	r2, #10
 80006b2:	701a      	strb	r2, [r3, #0]
	  	  		  break;
 80006b4:	e134      	b.n	8000920 <main+0x390>

	  	  	  case StateDisplay_MenuRoot_Print:
	  	  		  printf("************\n");
 80006b6:	4874      	ldr	r0, [pc, #464]	; (8000888 <main+0x2f8>)
 80006b8:	f003 f87c 	bl	80037b4 <puts>
	  	  		  printf("   Menu   \n");
 80006bc:	4873      	ldr	r0, [pc, #460]	; (800088c <main+0x2fc>)
 80006be:	f003 f879 	bl	80037b4 <puts>
	  	  		  printf("************\n");
 80006c2:	4871      	ldr	r0, [pc, #452]	; (8000888 <main+0x2f8>)
 80006c4:	f003 f876 	bl	80037b4 <puts>
	  	  		  printf("Menu 0: LED Control\r\n");
 80006c8:	4871      	ldr	r0, [pc, #452]	; (8000890 <main+0x300>)
 80006ca:	f003 f873 	bl	80037b4 <puts>
	  	  		  printf("Menu 1: Button Status\r\n");
 80006ce:	4871      	ldr	r0, [pc, #452]	; (8000894 <main+0x304>)
 80006d0:	f003 f870 	bl	80037b4 <puts>
	  	  		  printf("\n");
 80006d4:	200a      	movs	r0, #10
 80006d6:	f002 fffd 	bl	80036d4 <putchar>
	  	  		  STATE_Display = StateDisplay_MenuRoot_WaitInput;
 80006da:	4b69      	ldr	r3, [pc, #420]	; (8000880 <main+0x2f0>)
 80006dc:	220b      	movs	r2, #11
 80006de:	701a      	strb	r2, [r3, #0]
	  	  		  break;
 80006e0:	e11e      	b.n	8000920 <main+0x390>

	  	  	  case StateDisplay_MenuRoot_WaitInput:
	  	  		  switch (inputchar)
 80006e2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80006e6:	2b30      	cmp	r3, #48	; 0x30
 80006e8:	d004      	beq.n	80006f4 <main+0x164>
 80006ea:	2b31      	cmp	r3, #49	; 0x31
 80006ec:	d006      	beq.n	80006fc <main+0x16c>
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d00f      	beq.n	8000712 <main+0x182>
 80006f2:	e007      	b.n	8000704 <main+0x174>
	  	  		  {
	  	  		  	  case 0:
	  	  		  		  break;

	  	  		  	  case '0':
	  	  		  		  STATE_Display = StateDisplay_Menu0_Print;
 80006f4:	4b62      	ldr	r3, [pc, #392]	; (8000880 <main+0x2f0>)
 80006f6:	2214      	movs	r2, #20
 80006f8:	701a      	strb	r2, [r3, #0]
	  	  		  		  break;
 80006fa:	e00b      	b.n	8000714 <main+0x184>

	  	  		  	  case '1':
	  	  		  		  STATE_Display = StateDisplay_Menu1_Print;
 80006fc:	4b60      	ldr	r3, [pc, #384]	; (8000880 <main+0x2f0>)
 80006fe:	221e      	movs	r2, #30
 8000700:	701a      	strb	r2, [r3, #0]
	  	  		  		  break;
 8000702:	e007      	b.n	8000714 <main+0x184>

	  	  		  	  default:
	  	  		  		  printf("unidentified input\n");
 8000704:	4864      	ldr	r0, [pc, #400]	; (8000898 <main+0x308>)
 8000706:	f003 f855 	bl	80037b4 <puts>
	  	  		  		  STATE_Display = StateDisplay_MenuRoot_Print;
 800070a:	4b5d      	ldr	r3, [pc, #372]	; (8000880 <main+0x2f0>)
 800070c:	220a      	movs	r2, #10
 800070e:	701a      	strb	r2, [r3, #0]
	  	  		  		  break;
 8000710:	e000      	b.n	8000714 <main+0x184>
	  	  		  		  break;
 8000712:	bf00      	nop
	  	  		  }
	  	  		  break;
 8000714:	e104      	b.n	8000920 <main+0x390>

	  	  	  case StateDisplay_Menu0_Print:
	  		  		printf("************\n");
 8000716:	485c      	ldr	r0, [pc, #368]	; (8000888 <main+0x2f8>)
 8000718:	f003 f84c 	bl	80037b4 <puts>
	  		  		printf("Menu 0 : LED Control\n");
 800071c:	485f      	ldr	r0, [pc, #380]	; (800089c <main+0x30c>)
 800071e:	f003 f849 	bl	80037b4 <puts>
	  		  		printf("************\n");
 8000722:	4859      	ldr	r0, [pc, #356]	; (8000888 <main+0x2f8>)
 8000724:	f003 f846 	bl	80037b4 <puts>
	  		  		printf("a:Speed Up +1Hz\n");
 8000728:	485d      	ldr	r0, [pc, #372]	; (80008a0 <main+0x310>)
 800072a:	f003 f843 	bl	80037b4 <puts>
	  		  		printf("************\n");
 800072e:	4856      	ldr	r0, [pc, #344]	; (8000888 <main+0x2f8>)
 8000730:	f003 f840 	bl	80037b4 <puts>
	  		  		printf("s:Speed Down -1Hz\n");
 8000734:	485b      	ldr	r0, [pc, #364]	; (80008a4 <main+0x314>)
 8000736:	f003 f83d 	bl	80037b4 <puts>
	  		  		printf("************\n");
 800073a:	4853      	ldr	r0, [pc, #332]	; (8000888 <main+0x2f8>)
 800073c:	f003 f83a 	bl	80037b4 <puts>
	  		  		printf("d:On/Off\n");
 8000740:	4859      	ldr	r0, [pc, #356]	; (80008a8 <main+0x318>)
 8000742:	f003 f837 	bl	80037b4 <puts>
	  		  		printf("************\n");
 8000746:	4850      	ldr	r0, [pc, #320]	; (8000888 <main+0x2f8>)
 8000748:	f003 f834 	bl	80037b4 <puts>
	  		  		printf("x:Back\n");
 800074c:	4857      	ldr	r0, [pc, #348]	; (80008ac <main+0x31c>)
 800074e:	f003 f831 	bl	80037b4 <puts>
	  		  		printf("\n");
 8000752:	200a      	movs	r0, #10
 8000754:	f002 ffbe 	bl	80036d4 <putchar>
	  		  		STATE_Display = StateDisplay_Menu0_WaitInput;
 8000758:	4b49      	ldr	r3, [pc, #292]	; (8000880 <main+0x2f0>)
 800075a:	2215      	movs	r2, #21
 800075c:	701a      	strb	r2, [r3, #0]
	  		  		break;
 800075e:	e0df      	b.n	8000920 <main+0x390>

	  		  	case StateDisplay_Menu0_WaitInput:
	  		  		switch (inputchar)
 8000760:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8000764:	2b64      	cmp	r3, #100	; 0x64
 8000766:	d033      	beq.n	80007d0 <main+0x240>
 8000768:	2b64      	cmp	r3, #100	; 0x64
 800076a:	dc04      	bgt.n	8000776 <main+0x1e6>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d04e      	beq.n	800080e <main+0x27e>
 8000770:	2b61      	cmp	r3, #97	; 0x61
 8000772:	d005      	beq.n	8000780 <main+0x1f0>
 8000774:	e044      	b.n	8000800 <main+0x270>
 8000776:	2b73      	cmp	r3, #115	; 0x73
 8000778:	d012      	beq.n	80007a0 <main+0x210>
 800077a:	2b78      	cmp	r3, #120	; 0x78
 800077c:	d03c      	beq.n	80007f8 <main+0x268>
 800077e:	e03f      	b.n	8000800 <main+0x270>
	  		  		{
	  		  			case 0:
	  		  				break;

	  		  			case 'a':
	  		  				frequency += 1;
 8000780:	4b4b      	ldr	r3, [pc, #300]	; (80008b0 <main+0x320>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <main+0x320>)
 800078a:	701a      	strb	r2, [r3, #0]
	  		  			    printf("Frequency is %d Hz\n",frequency);
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <main+0x320>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	4848      	ldr	r0, [pc, #288]	; (80008b4 <main+0x324>)
 8000794:	f002 ff86 	bl	80036a4 <iprintf>
	  		  			    STATE_Display = StateDisplay_Menu0_Print;
 8000798:	4b39      	ldr	r3, [pc, #228]	; (8000880 <main+0x2f0>)
 800079a:	2214      	movs	r2, #20
 800079c:	701a      	strb	r2, [r3, #0]
	  		  			    break;
 800079e:	e037      	b.n	8000810 <main+0x280>

	  		  			 case 's':
	  		  				 if (frequency > 1)
 80007a0:	4b43      	ldr	r3, [pc, #268]	; (80008b0 <main+0x320>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d90c      	bls.n	80007c2 <main+0x232>
	  		  			     {
	  		  					 frequency -= 1;
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <main+0x320>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b3f      	ldr	r3, [pc, #252]	; (80008b0 <main+0x320>)
 80007b2:	701a      	strb	r2, [r3, #0]
	  		  			         printf("Frequency is %d Hz\n",frequency);
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <main+0x320>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	483e      	ldr	r0, [pc, #248]	; (80008b4 <main+0x324>)
 80007bc:	f002 ff72 	bl	80036a4 <iprintf>
 80007c0:	e002      	b.n	80007c8 <main+0x238>
	  		  			     }
	  		  			     else
	  		  			     {
	  		  			         printf("Frequency is limited\n");
 80007c2:	483d      	ldr	r0, [pc, #244]	; (80008b8 <main+0x328>)
 80007c4:	f002 fff6 	bl	80037b4 <puts>
	  		  			     }
	  		  			     STATE_Display = StateDisplay_Menu0_Print;
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <main+0x2f0>)
 80007ca:	2214      	movs	r2, #20
 80007cc:	701a      	strb	r2, [r3, #0]
	  		  			     break;
 80007ce:	e01f      	b.n	8000810 <main+0x280>

	  		  			   case 'd':
	  		  			      if (on == 1)
 80007d0:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <main+0x32c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d108      	bne.n	80007ea <main+0x25a>
	  		  			      {
	  		  			    	  on =0;
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <main+0x32c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
	  		  			    	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	4837      	ldr	r0, [pc, #220]	; (80008c0 <main+0x330>)
 80007e4:	f000 ff6c 	bl	80016c0 <HAL_GPIO_WritePin>
 80007e8:	e002      	b.n	80007f0 <main+0x260>
	  		  			      }
	  		  			      else
	  		  			      {
	  		  			          on = 1;
 80007ea:	4b34      	ldr	r3, [pc, #208]	; (80008bc <main+0x32c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	601a      	str	r2, [r3, #0]
	  		  			      }
	  		  			      STATE_Display = StateDisplay_Menu0_Print;
 80007f0:	4b23      	ldr	r3, [pc, #140]	; (8000880 <main+0x2f0>)
 80007f2:	2214      	movs	r2, #20
 80007f4:	701a      	strb	r2, [r3, #0]
	  		  			      break;
 80007f6:	e00b      	b.n	8000810 <main+0x280>

	  		  			   case 'x':
	  		  			      STATE_Display = StateDisplay_MenuRoot_Print;
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <main+0x2f0>)
 80007fa:	220a      	movs	r2, #10
 80007fc:	701a      	strb	r2, [r3, #0]
	  		  			      break;
 80007fe:	e007      	b.n	8000810 <main+0x280>

	  		  			   default:
	  		  			      printf("unidentified input\n");
 8000800:	4825      	ldr	r0, [pc, #148]	; (8000898 <main+0x308>)
 8000802:	f002 ffd7 	bl	80037b4 <puts>
	  		  			      STATE_Display = StateDisplay_Menu0_Print;
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <main+0x2f0>)
 8000808:	2214      	movs	r2, #20
 800080a:	701a      	strb	r2, [r3, #0]
	  		  			      break;
 800080c:	e000      	b.n	8000810 <main+0x280>
	  		  				break;
 800080e:	bf00      	nop
	  		  		}
	  		  		break;
 8000810:	e086      	b.n	8000920 <main+0x390>

	  		  	 case StateDisplay_Menu1_Print: //display state
	  		  		 printf("************\n");
 8000812:	481d      	ldr	r0, [pc, #116]	; (8000888 <main+0x2f8>)
 8000814:	f002 ffce 	bl	80037b4 <puts>
	  		  		 printf("Menu 1: Button Status\n");
 8000818:	482a      	ldr	r0, [pc, #168]	; (80008c4 <main+0x334>)
 800081a:	f002 ffcb 	bl	80037b4 <puts>
	  		  		 printf("************\n");
 800081e:	481a      	ldr	r0, [pc, #104]	; (8000888 <main+0x2f8>)
 8000820:	f002 ffc8 	bl	80037b4 <puts>
	  		  		 printf("x:Back\n");
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <main+0x31c>)
 8000826:	f002 ffc5 	bl	80037b4 <puts>
	  		  		 printf("************\n");
 800082a:	4817      	ldr	r0, [pc, #92]	; (8000888 <main+0x2f8>)
 800082c:	f002 ffc2 	bl	80037b4 <puts>
	  		  		 printf("Press/Unpress button to show status\n");
 8000830:	4825      	ldr	r0, [pc, #148]	; (80008c8 <main+0x338>)
 8000832:	f002 ffbf 	bl	80037b4 <puts>
	  		  		 printf("************\n");
 8000836:	4814      	ldr	r0, [pc, #80]	; (8000888 <main+0x2f8>)
 8000838:	f002 ffbc 	bl	80037b4 <puts>
	  		  		 printf("\n");
 800083c:	200a      	movs	r0, #10
 800083e:	f002 ff49 	bl	80036d4 <putchar>
	  		  		 STATE_Display = StateDisplay_Menu1_WaitInput;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <main+0x2f0>)
 8000844:	221f      	movs	r2, #31
 8000846:	701a      	strb	r2, [r3, #0]
	  		  		 break;
 8000848:	e06a      	b.n	8000920 <main+0x390>

	  		  	 case StateDisplay_Menu1_WaitInput:
	  		  		 switch(inputchar)
 800084a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800084e:	2b00      	cmp	r3, #0
 8000850:	d03c      	beq.n	80008cc <main+0x33c>
 8000852:	2b78      	cmp	r3, #120	; 0x78
 8000854:	d103      	bne.n	800085e <main+0x2ce>
	  		  //								STATE_Display = StateDisplay_Menu1_Print;
	  		  //							}
	  		  				break;

	  		  		 	 case 'x':
	  		  		 		 STATE_Display = StateDisplay_MenuRoot_Print;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <main+0x2f0>)
 8000858:	220a      	movs	r2, #10
 800085a:	701a      	strb	r2, [r3, #0]
	  		  		 		 break;
 800085c:	e037      	b.n	80008ce <main+0x33e>

	  		  			default:
	  		  				printf("unidentified input\n"); //�?สดงข้อความเมื่อ�?ดไม่ถู�?ปุ่ม
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <main+0x308>)
 8000860:	f002 ffa8 	bl	80037b4 <puts>
	  		  				STATE_Display = StateDisplay_Menu1_Print; //เปลี่ยน state เป็น หน้า menu1
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <main+0x2f0>)
 8000866:	221e      	movs	r2, #30
 8000868:	701a      	strb	r2, [r3, #0]
	  		  				break;
 800086a:	e030      	b.n	80008ce <main+0x33e>
 800086c:	08004ab0 	.word	0x08004ab0
 8000870:	20000138 	.word	0x20000138
 8000874:	200000b4 	.word	0x200000b4
 8000878:	08004968 	.word	0x08004968
 800087c:	20000094 	.word	0x20000094
 8000880:	200000d4 	.word	0x200000d4
 8000884:	0800497c 	.word	0x0800497c
 8000888:	08004998 	.word	0x08004998
 800088c:	080049a8 	.word	0x080049a8
 8000890:	080049b4 	.word	0x080049b4
 8000894:	080049cc 	.word	0x080049cc
 8000898:	080049e4 	.word	0x080049e4
 800089c:	080049f8 	.word	0x080049f8
 80008a0:	08004a10 	.word	0x08004a10
 80008a4:	08004a20 	.word	0x08004a20
 80008a8:	08004a34 	.word	0x08004a34
 80008ac:	08004a40 	.word	0x08004a40
 80008b0:	20000000 	.word	0x20000000
 80008b4:	08004a48 	.word	0x08004a48
 80008b8:	08004a5c 	.word	0x08004a5c
 80008bc:	20000004 	.word	0x20000004
 80008c0:	40020000 	.word	0x40020000
 80008c4:	08004a74 	.word	0x08004a74
 80008c8:	08004a8c 	.word	0x08004a8c
	  		  				break;
 80008cc:	bf00      	nop
	  		  		}

	  		  	if (micros() - timestamp >= LED_TOGGLE_DELAY/frequency && on ==1)
 80008ce:	f000 f9f1 	bl	8000cb4 <micros>
 80008d2:	4605      	mov	r5, r0
 80008d4:	460e      	mov	r6, r1
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0x394>)
 80008d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008dc:	4629      	mov	r1, r5
 80008de:	4632      	mov	r2, r6
 80008e0:	1ac9      	subs	r1, r1, r3
 80008e2:	eb62 0204 	sbc.w	r2, r2, r4
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <main+0x398>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <main+0x39c>)
 80008ee:	fb93 f3f0 	sdiv	r3, r3, r0
 80008f2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80008f6:	42a2      	cmp	r2, r4
 80008f8:	bf08      	it	eq
 80008fa:	4299      	cmpeq	r1, r3
 80008fc:	f4ff ae6c 	bcc.w	80005d8 <main+0x48>
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <main+0x3a0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	f47f ae67 	bne.w	80005d8 <main+0x48>
	  		  	{
	  		  		timestamp = micros();
 800090a:	f000 f9d3 	bl	8000cb4 <micros>
 800090e:	4603      	mov	r3, r0
 8000910:	460c      	mov	r4, r1
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <main+0x394>)
 8000914:	e9c2 3400 	strd	r3, r4, [r2]
	  		  		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000918:	2120      	movs	r1, #32
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <main+0x3a4>)
 800091c:	f000 fee9 	bl	80016f2 <HAL_GPIO_TogglePin>
  {
 8000920:	e65a      	b.n	80005d8 <main+0x48>
 8000922:	bf00      	nop
 8000924:	200000e0 	.word	0x200000e0
 8000928:	20000000 	.word	0x20000000
 800092c:	0007a120 	.word	0x0007a120
 8000930:	20000004 	.word	0x20000004
 8000934:	40020000 	.word	0x40020000

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b094      	sub	sp, #80	; 0x50
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fea4 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <SystemClock_Config+0xcc>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a27      	ldr	r2, [pc, #156]	; (8000a04 <SystemClock_Config+0xcc>)
 8000966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000978:	2300      	movs	r3, #0
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <SystemClock_Config+0xd0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemClock_Config+0xd0>)
 8000982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2310      	movs	r3, #16
 800099e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009a8:	2310      	movs	r3, #16
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0320 	add.w	r3, r7, #32
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 feb2 	bl	8001728 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009ca:	f000 f98d 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	230f      	movs	r3, #15
 80009d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2302      	movs	r3, #2
 80009d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2102      	movs	r1, #2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f90c 	bl	8001c08 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f6:	f000 f977 	bl	8000ce8 <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3750      	adds	r7, #80	; 0x50
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40007000 	.word	0x40007000

08000a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a52:	f001 facb 	bl	8001fec <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a5c:	f000 f944 	bl	8000ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a6e:	f001 fbf0 	bl	8002252 <HAL_TIM_ConfigClockSource>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a78:	f000 f936 	bl	8000ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a84:	463b      	mov	r3, r7
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_TIM2_Init+0x94>)
 8000a8a:	f001 fddb 	bl	8002644 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a94:	f000 f928 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200000f8 	.word	0x200000f8

08000aa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART2_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART2_UART_Init+0x4c>)
 8000adc:	f001 fe34 	bl	8002748 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f8ff 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000138 	.word	0x20000138
 8000af4:	40004400 	.word	0x40004400

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2120      	movs	r1, #32
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <MX_GPIO_Init+0xd4>)
 8000b84:	f000 fd9c 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0xd8>)
 8000b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_GPIO_Init+0xdc>)
 8000b9e:	f000 fc0d 	bl	80013bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MX_GPIO_Init+0xd4>)
 8000bba:	f000 fbff 	bl	80013bc <HAL_GPIO_Init>

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	10210000 	.word	0x10210000
 8000bd4:	40020800 	.word	0x40020800

08000bd8 <UARTRecieveIT>:
//	HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
//
//}

int16_t UARTRecieveIT()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
	//store data last position
	static uint32_t dataPos =0;
	//create dummy data
	int16_t data=-1;
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	80fb      	strh	r3, [r7, #6]
	//check pos in buffer vs last position
	//32 size - จำนวนที่เหลือ = ตำ�?หน่งปัจจุบัน
	//มี�?ารพิมพ์ตำ�?หน่งจะไม่เท่า�?ัน
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <UARTRecieveIT+0x58>)
 8000be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <UARTRecieveIT+0x58>)
 8000bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <UARTRecieveIT+0x5c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d010      	beq.n	8000c1e <UARTRecieveIT+0x46>
	{
		//read data from buffer
		data=RxDataBuffer[dataPos];
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <UARTRecieveIT+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <UARTRecieveIT+0x60>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	80fb      	strh	r3, [r7, #6]

		//move to next pos //ตำ�?หน่งข้อมูลล่าสุดที่อ่าน
		dataPos= (dataPos+1)%huart2.RxXferSize;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <UARTRecieveIT+0x5c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <UARTRecieveIT+0x58>)
 8000c0e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8000c10:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c14:	fb02 f201 	mul.w	r2, r2, r1
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <UARTRecieveIT+0x5c>)
 8000c1c:	6013      	str	r3, [r2, #0]
	}
	return data;
 8000c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000138 	.word	0x20000138
 8000c34:	200000e8 	.word	0x200000e8
 8000c38:	200000b4 	.word	0x200000b4

08000c3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	//if(huart == huartxx) ถ้ามีหลายตัว
	sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <HAL_UART_RxCpltCallback+0x30>)
 8000c46:	490a      	ldr	r1, [pc, #40]	; (8000c70 <HAL_UART_RxCpltCallback+0x34>)
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <HAL_UART_RxCpltCallback+0x38>)
 8000c4a:	f002 fdbb 	bl	80037c4 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer));
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <HAL_UART_RxCpltCallback+0x38>)
 8000c50:	f7ff fac6 	bl	80001e0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4906      	ldr	r1, [pc, #24]	; (8000c74 <HAL_UART_RxCpltCallback+0x38>)
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <HAL_UART_RxCpltCallback+0x3c>)
 8000c5e:	f001 fe59 	bl	8002914 <HAL_UART_Transmit_IT>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200000b4 	.word	0x200000b4
 8000c70:	08004ae4 	.word	0x08004ae4
 8000c74:	20000094 	.word	0x20000094
 8000c78:	20000138 	.word	0x20000138

08000c7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b490      	push	{r4, r7}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d109      	bne.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c8e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000c92:	f111 33ff 	adds.w	r3, r1, #4294967295
 8000c96:	f142 0400 	adc.w	r4, r2, #0
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000c9c:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc90      	pop	{r4, r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200000f8 	.word	0x200000f8
 8000cb0:	200000d8 	.word	0x200000d8

08000cb4 <micros>:

uint64_t micros()
{
 8000cb4:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8000cb8:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <micros+0x2c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <micros+0x30>)
 8000cc8:	e9d3 bc00 	ldrd	fp, ip, [r3]
 8000ccc:	eb1b 0301 	adds.w	r3, fp, r1
 8000cd0:	eb4c 0402 	adc.w	r4, ip, r2
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	4621      	mov	r1, r4
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8000cde:	4770      	bx	lr
 8000ce0:	200000f8 	.word	0x200000f8
 8000ce4:	200000d8 	.word	0x200000d8

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cee:	e7fe      	b.n	8000cee <Error_Handler+0x6>

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f000 fae0 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d50:	d115      	bne.n	8000d7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	201c      	movs	r0, #28
 8000d74:	f000 fac9 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d78:	201c      	movs	r0, #28
 8000d7a:	f000 fae2 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <HAL_UART_MspInit+0x94>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d133      	bne.n	8000e16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a1b      	ldr	r2, [pc, #108]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a14      	ldr	r2, [pc, #80]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_UART_MspInit+0x98>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000de6:	230c      	movs	r3, #12
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df6:	2307      	movs	r3, #7
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4809      	ldr	r0, [pc, #36]	; (8000e28 <HAL_UART_MspInit+0x9c>)
 8000e02:	f000 fadb 	bl	80013bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f000 fa7d 	bl	800130a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e10:	2026      	movs	r0, #38	; 0x26
 8000e12:	f000 fa96 	bl	8001342 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <MemManage_Handler+0x4>

08000e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <BusFault_Handler+0x4>

08000e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler+0x4>

08000e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f94c 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM2_IRQHandler+0x10>)
 8000e86:	f001 f8dc 	bl	8002042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000f8 	.word	0x200000f8

08000e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	f001 fdd5 	bl	8002a48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000138 	.word	0x20000138

08000ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00a      	b.n	8000ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eba:	f3af 8000 	nop.w
 8000ebe:	4601      	mov	r1, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbf0      	blt.n	8000eba <_read+0x12>
	}

return len;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b086      	sub	sp, #24
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	60f8      	str	r0, [r7, #12]
 8000eea:	60b9      	str	r1, [r7, #8]
 8000eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e009      	b.n	8000f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	60ba      	str	r2, [r7, #8]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbf1      	blt.n	8000ef4 <_write+0x12>
	}
	return len;
 8000f10:	687b      	ldr	r3, [r7, #4]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <_close>:

int _close(int file)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	return -1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f42:	605a      	str	r2, [r3, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <_isatty>:

int _isatty(int file)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	return 0;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	; (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f002 fb44 	bl	8003640 <__errno>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	230c      	movs	r3, #12
 8000fbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	200000ec 	.word	0x200000ec
 8000fec:	20000180 	.word	0x20000180

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b08      	ldr	r3, [pc, #32]	; (8001018 <SystemInit+0x28>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <SystemInit+0x28>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SystemInit+0x28>)
 8001006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100a:	609a      	str	r2, [r3, #8]
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001020:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001022:	e003      	b.n	800102c <LoopCopyDataInit>

08001024 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001026:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001028:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800102a:	3104      	adds	r1, #4

0800102c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001030:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001034:	d3f6      	bcc.n	8001024 <CopyDataInit>
  ldr  r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001038:	e002      	b.n	8001040 <LoopFillZerobss>

0800103a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800103a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800103c:	f842 3b04 	str.w	r3, [r2], #4

08001040 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001042:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001044:	d3f9      	bcc.n	800103a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd3 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f002 faff 	bl	800364c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fa9f 	bl	8000590 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001058:	08004bb4 	.word	0x08004bb4
  ldr  r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001060:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001064:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001068:	20000180 	.word	0x20000180

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f92b 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fe24 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f943 	bl	800135e <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f90b 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000008 	.word	0x20000008
 800110c:	20000010 	.word	0x20000010
 8001110:	2000000c 	.word	0x2000000c

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000010 	.word	0x20000010
 8001138:	20000178 	.word	0x20000178

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000178 	.word	0x20000178

08001154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001170:	4013      	ands	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800117c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	; (8001198 <__NVIC_SetPriorityGrouping+0x44>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <__NVIC_GetPriorityGrouping+0x18>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	f003 0307 	and.w	r3, r3, #7
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0b      	blt.n	80011e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <__NVIC_EnableIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	; (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	; (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f1c3 0307 	rsb	r3, r3, #7
 8001262:	2b04      	cmp	r3, #4
 8001264:	bf28      	it	cs
 8001266:	2304      	movcs	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3304      	adds	r3, #4
 800126e:	2b06      	cmp	r3, #6
 8001270:	d902      	bls.n	8001278 <NVIC_EncodePriority+0x30>
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3b03      	subs	r3, #3
 8001276:	e000      	b.n	800127a <NVIC_EncodePriority+0x32>
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	f04f 32ff 	mov.w	r2, #4294967295
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43da      	mvns	r2, r3
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001290:	f04f 31ff 	mov.w	r1, #4294967295
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43d9      	mvns	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	4313      	orrs	r3, r2
         );
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff8e 	bl	80011f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff29 	bl	8001154 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff3e 	bl	800119c <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff8e 	bl	8001248 <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5d 	bl	80011f4 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff31 	bl	80011b8 <__NVIC_EnableIRQ>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ffa2 	bl	80012b0 <SysTick_Config>
 800136c:	4603      	mov	r3, r0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d004      	beq.n	8001394 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2280      	movs	r2, #128	; 0x80
 800138e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e00c      	b.n	80013ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2205      	movs	r2, #5
 8001398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e159      	b.n	800168c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f040 8148 	bne.w	8001686 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d00b      	beq.n	8001416 <HAL_GPIO_Init+0x5a>
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800140a:	2b11      	cmp	r3, #17
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b12      	cmp	r3, #18
 8001414:	d130      	bne.n	8001478 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	091b      	lsrs	r3, r3, #4
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0xfc>
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d123      	bne.n	8001500 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	08da      	lsrs	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3208      	adds	r2, #8
 80014fa:	69b9      	ldr	r1, [r7, #24]
 80014fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	2203      	movs	r2, #3
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0203 	and.w	r2, r3, #3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80a2 	beq.w	8001686 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a55      	ldr	r2, [pc, #340]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b53      	ldr	r3, [pc, #332]	; (80016a0 <HAL_GPIO_Init+0x2e4>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155e:	4a51      	ldr	r2, [pc, #324]	; (80016a4 <HAL_GPIO_Init+0x2e8>)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a48      	ldr	r2, [pc, #288]	; (80016a8 <HAL_GPIO_Init+0x2ec>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d019      	beq.n	80015be <HAL_GPIO_Init+0x202>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a47      	ldr	r2, [pc, #284]	; (80016ac <HAL_GPIO_Init+0x2f0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0x1fe>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <HAL_GPIO_Init+0x2f4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d00d      	beq.n	80015b6 <HAL_GPIO_Init+0x1fa>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a45      	ldr	r2, [pc, #276]	; (80016b4 <HAL_GPIO_Init+0x2f8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d007      	beq.n	80015b2 <HAL_GPIO_Init+0x1f6>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a44      	ldr	r2, [pc, #272]	; (80016b8 <HAL_GPIO_Init+0x2fc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d101      	bne.n	80015ae <HAL_GPIO_Init+0x1f2>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015ae:	2307      	movs	r3, #7
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x204>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4934      	ldr	r1, [pc, #208]	; (80016a4 <HAL_GPIO_Init+0x2e8>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_GPIO_Init+0x300>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <HAL_GPIO_Init+0x300>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_GPIO_Init+0x300>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_GPIO_Init+0x300>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_GPIO_Init+0x300>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f aea2 	bls.w	80013d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	401a      	ands	r2, r3
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	429a      	cmp	r2, r3
 800170a:	d104      	bne.n	8001716 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	041a      	lsls	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001714:	e002      	b.n	800171c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e25b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d075      	beq.n	8001832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001746:	4ba3      	ldr	r3, [pc, #652]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b04      	cmp	r3, #4
 8001750:	d00c      	beq.n	800176c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4ba0      	ldr	r3, [pc, #640]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800175a:	2b08      	cmp	r3, #8
 800175c:	d112      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800176a:	d10b      	bne.n	8001784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	4b99      	ldr	r3, [pc, #612]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <HAL_RCC_OscConfig+0x108>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d157      	bne.n	8001830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e236      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800178c:	d106      	bne.n	800179c <HAL_RCC_OscConfig+0x74>
 800178e:	4b91      	ldr	r3, [pc, #580]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a90      	ldr	r2, [pc, #576]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e01d      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x98>
 80017a6:	4b8b      	ldr	r3, [pc, #556]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a8a      	ldr	r2, [pc, #552]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a87      	ldr	r2, [pc, #540]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0xb0>
 80017c0:	4b84      	ldr	r3, [pc, #528]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a83      	ldr	r2, [pc, #524]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a80      	ldr	r2, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d013      	beq.n	8001808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fcac 	bl	800113c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fca8 	bl	800113c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1fb      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 8001806:	e014      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001808:	f7ff fc98 	bl	800113c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001810:	f7ff fc94 	bl	800113c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b64      	cmp	r3, #100	; 0x64
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1e7      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	4b6c      	ldr	r3, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0xe8>
 800182e:	e000      	b.n	8001832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d063      	beq.n	8001906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183e:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b62      	ldr	r3, [pc, #392]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001852:	2b08      	cmp	r3, #8
 8001854:	d11c      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d116      	bne.n	8001890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e1bb      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4952      	ldr	r1, [pc, #328]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188e:	e03a      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <HAL_RCC_OscConfig+0x2b0>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff fc4d 	bl	800113c <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a6:	f7ff fc49 	bl	800113c <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e19c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c4:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4940      	ldr	r1, [pc, #256]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_RCC_OscConfig+0x2b0>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff fc2c 	bl	800113c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fc28 	bl	800113c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e17b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	2b00      	cmp	r3, #0
 8001910:	d030      	beq.n	8001974 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d016      	beq.n	8001948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_RCC_OscConfig+0x2b4>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff fc0c 	bl	800113c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001928:	f7ff fc08 	bl	800113c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e15b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0x200>
 8001946:	e015      	b.n	8001974 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_RCC_OscConfig+0x2b4>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fbf5 	bl	800113c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fbf1 	bl	800113c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e144      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80a0 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_OscConfig+0x2b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d121      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_RCC_OscConfig+0x2b8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_RCC_OscConfig+0x2b8>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fbb7 	bl	800113c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e011      	b.n	80019f6 <HAL_RCC_OscConfig+0x2ce>
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470000 	.word	0x42470000
 80019dc:	42470e80 	.word	0x42470e80
 80019e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e4:	f7ff fbaa 	bl	800113c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0fd      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_OscConfig+0x4d4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2f0>
 8001a0a:	4b7d      	ldr	r3, [pc, #500]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	e01c      	b.n	8001a52 <HAL_RCC_OscConfig+0x32a>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x312>
 8001a20:	4b77      	ldr	r3, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a76      	ldr	r2, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a26:	f043 0304 	orr.w	r3, r3, #4
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	4b74      	ldr	r3, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a73      	ldr	r2, [pc, #460]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	e00b      	b.n	8001a52 <HAL_RCC_OscConfig+0x32a>
 8001a3a:	4b71      	ldr	r3, [pc, #452]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a70      	ldr	r2, [pc, #448]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	4b6e      	ldr	r3, [pc, #440]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a6d      	ldr	r2, [pc, #436]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d015      	beq.n	8001a86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fb6f 	bl	800113c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fb6b 	bl	800113c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0bc      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0ee      	beq.n	8001a62 <HAL_RCC_OscConfig+0x33a>
 8001a84:	e014      	b.n	8001ab0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fb59 	bl	800113c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff fb55 	bl	800113c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e0a6      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa4:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d105      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab6:	4b52      	ldr	r3, [pc, #328]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8092 	beq.w	8001bf0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001acc:	4b4c      	ldr	r3, [pc, #304]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d05c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d141      	bne.n	8001b64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae0:	4b48      	ldr	r3, [pc, #288]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb29 	bl	800113c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb25 	bl	800113c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e078      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f0      	bne.n	8001aee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	69da      	ldr	r2, [r3, #28]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	019b      	lsls	r3, r3, #6
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	4933      	ldr	r1, [pc, #204]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fafe 	bl	800113c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fafa 	bl	800113c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e04d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x41c>
 8001b62:	e045      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x4dc>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fae7 	bl	800113c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff fae3 	bl	800113c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e036      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x44a>
 8001b90:	e02e      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e029      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_RCC_OscConfig+0x4d8>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d115      	bne.n	8001bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10d      	bne.n	8001bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470060 	.word	0x42470060

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cc      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b68      	ldr	r3, [pc, #416]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d90c      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b65      	ldr	r3, [pc, #404]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4a52      	ldr	r2, [pc, #328]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d044      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d119      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc6:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e06f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e067      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce6:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 0203 	bic.w	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	4934      	ldr	r1, [pc, #208]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf8:	f7ff fa20 	bl	800113c <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d00:	f7ff fa1c 	bl	800113c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e04f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 020c 	and.w	r2, r3, #12
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1eb      	bne.n	8001d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d20c      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f821 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d92:	4601      	mov	r1, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	5cd3      	ldrb	r3, [r2, r3]
 8001da2:	fa21 f303 	lsr.w	r3, r1, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff f980 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	08004af4 	.word	0x08004af4
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	2000000c 	.word	0x2000000c

08001dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d007      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x32>
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d008      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x38>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80b4 	bne.w	8001f68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b5e      	ldr	r3, [pc, #376]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e02:	60bb      	str	r3, [r7, #8]
       break;
 8001e04:	e0b3      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e06:	4b5e      	ldr	r3, [pc, #376]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e08:	60bb      	str	r3, [r7, #8]
      break;
 8001e0a:	e0b0      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e0c:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e16:	4b58      	ldr	r3, [pc, #352]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d04a      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e22:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	099b      	lsrs	r3, r3, #6
 8001e28:	f04f 0400 	mov.w	r4, #0
 8001e2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	ea03 0501 	and.w	r5, r3, r1
 8001e38:	ea04 0602 	and.w	r6, r4, r2
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	4632      	mov	r2, r6
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	f04f 0400 	mov.w	r4, #0
 8001e48:	0154      	lsls	r4, r2, #5
 8001e4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e4e:	014b      	lsls	r3, r1, #5
 8001e50:	4619      	mov	r1, r3
 8001e52:	4622      	mov	r2, r4
 8001e54:	1b49      	subs	r1, r1, r5
 8001e56:	eb62 0206 	sbc.w	r2, r2, r6
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	f04f 0400 	mov.w	r4, #0
 8001e62:	0194      	lsls	r4, r2, #6
 8001e64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e68:	018b      	lsls	r3, r1, #6
 8001e6a:	1a5b      	subs	r3, r3, r1
 8001e6c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e70:	f04f 0100 	mov.w	r1, #0
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	00e2      	lsls	r2, r4, #3
 8001e7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e7e:	00d9      	lsls	r1, r3, #3
 8001e80:	460b      	mov	r3, r1
 8001e82:	4614      	mov	r4, r2
 8001e84:	195b      	adds	r3, r3, r5
 8001e86:	eb44 0406 	adc.w	r4, r4, r6
 8001e8a:	f04f 0100 	mov.w	r1, #0
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	0262      	lsls	r2, r4, #9
 8001e94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e98:	0259      	lsls	r1, r3, #9
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f04f 0400 	mov.w	r4, #0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4623      	mov	r3, r4
 8001eac:	f7fe f9f0 	bl	8000290 <__aeabi_uldivmod>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	e049      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb8:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	f04f 0400 	mov.w	r4, #0
 8001ec2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	ea03 0501 	and.w	r5, r3, r1
 8001ece:	ea04 0602 	and.w	r6, r4, r2
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4632      	mov	r2, r6
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	f04f 0400 	mov.w	r4, #0
 8001ede:	0154      	lsls	r4, r2, #5
 8001ee0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ee4:	014b      	lsls	r3, r1, #5
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4622      	mov	r2, r4
 8001eea:	1b49      	subs	r1, r1, r5
 8001eec:	eb62 0206 	sbc.w	r2, r2, r6
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f04f 0400 	mov.w	r4, #0
 8001ef8:	0194      	lsls	r4, r2, #6
 8001efa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001efe:	018b      	lsls	r3, r1, #6
 8001f00:	1a5b      	subs	r3, r3, r1
 8001f02:	eb64 0402 	sbc.w	r4, r4, r2
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	00e2      	lsls	r2, r4, #3
 8001f10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f14:	00d9      	lsls	r1, r3, #3
 8001f16:	460b      	mov	r3, r1
 8001f18:	4614      	mov	r4, r2
 8001f1a:	195b      	adds	r3, r3, r5
 8001f1c:	eb44 0406 	adc.w	r4, r4, r6
 8001f20:	f04f 0100 	mov.w	r1, #0
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	02a2      	lsls	r2, r4, #10
 8001f2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f2e:	0299      	lsls	r1, r3, #10
 8001f30:	460b      	mov	r3, r1
 8001f32:	4614      	mov	r4, r2
 8001f34:	4618      	mov	r0, r3
 8001f36:	4621      	mov	r1, r4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f04f 0400 	mov.w	r4, #0
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4623      	mov	r3, r4
 8001f42:	f7fe f9a5 	bl	8000290 <__aeabi_uldivmod>
 8001f46:	4603      	mov	r3, r0
 8001f48:	460c      	mov	r4, r1
 8001f4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	3301      	adds	r3, #1
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	60bb      	str	r3, [r7, #8]
      break;
 8001f66:	e002      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f6a:	60bb      	str	r3, [r7, #8]
      break;
 8001f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	00f42400 	.word	0x00f42400
 8001f80:	007a1200 	.word	0x007a1200

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000008 	.word	0x20000008

08001f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa0:	f7ff fff0 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa4:	4601      	mov	r1, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a9b      	lsrs	r3, r3, #10
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08004b04 	.word	0x08004b04

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc8:	f7ff ffdc 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4601      	mov	r1, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	0b5b      	lsrs	r3, r3, #13
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4a03      	ldr	r2, [pc, #12]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	08004b04 	.word	0x08004b04

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e01d      	b.n	800203a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fe94 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	4619      	mov	r1, r3
 800202a:	4610      	mov	r0, r2
 800202c:	f000 f9f0 	bl	8002410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b02      	cmp	r3, #2
 8002056:	d122      	bne.n	800209e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d11b      	bne.n	800209e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f06f 0202 	mvn.w	r2, #2
 800206e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f9a5 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
 800208a:	e005      	b.n	8002098 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f997 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f9a8 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d122      	bne.n	80020f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d11b      	bne.n	80020f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f06f 0204 	mvn.w	r2, #4
 80020c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f97b 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
 80020de:	e005      	b.n	80020ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f96d 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f97e 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b08      	cmp	r3, #8
 80020fe:	d122      	bne.n	8002146 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d11b      	bne.n	8002146 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0208 	mvn.w	r2, #8
 8002116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2204      	movs	r2, #4
 800211c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f951 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
 8002132:	e005      	b.n	8002140 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f943 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f954 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b10      	cmp	r3, #16
 8002152:	d122      	bne.n	800219a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	d11b      	bne.n	800219a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f06f 0210 	mvn.w	r2, #16
 800216a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2208      	movs	r2, #8
 8002170:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f927 	bl	80023d4 <HAL_TIM_IC_CaptureCallback>
 8002186:	e005      	b.n	8002194 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f919 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f92a 	bl	80023e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d107      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f06f 0201 	mvn.w	r2, #1
 80021be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7fe fd5b 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d0:	2b80      	cmp	r3, #128	; 0x80
 80021d2:	d10e      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 faa1 	bl	8002734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fc:	2b40      	cmp	r3, #64	; 0x40
 80021fe:	d10e      	bne.n	800221e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d107      	bne.n	800221e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f8ef 	bl	80023fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b20      	cmp	r3, #32
 800222a:	d10e      	bne.n	800224a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d107      	bne.n	800224a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f06f 0220 	mvn.w	r2, #32
 8002242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa6b 	bl	8002720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_TIM_ConfigClockSource+0x18>
 8002266:	2302      	movs	r3, #2
 8002268:	e0a6      	b.n	80023b8 <HAL_TIM_ConfigClockSource+0x166>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2202      	movs	r2, #2
 8002276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002288:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002290:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d067      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x120>
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d80b      	bhi.n	80022be <HAL_TIM_ConfigClockSource+0x6c>
 80022a6:	2b10      	cmp	r3, #16
 80022a8:	d073      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x140>
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d802      	bhi.n	80022b4 <HAL_TIM_ConfigClockSource+0x62>
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d06f      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80022b2:	e078      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d06c      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x140>
 80022b8:	2b30      	cmp	r3, #48	; 0x30
 80022ba:	d06a      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80022bc:	e073      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022be:	2b70      	cmp	r3, #112	; 0x70
 80022c0:	d00d      	beq.n	80022de <HAL_TIM_ConfigClockSource+0x8c>
 80022c2:	2b70      	cmp	r3, #112	; 0x70
 80022c4:	d804      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x7e>
 80022c6:	2b50      	cmp	r3, #80	; 0x50
 80022c8:	d033      	beq.n	8002332 <HAL_TIM_ConfigClockSource+0xe0>
 80022ca:	2b60      	cmp	r3, #96	; 0x60
 80022cc:	d041      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80022ce:	e06a      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80022d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d4:	d066      	beq.n	80023a4 <HAL_TIM_ConfigClockSource+0x152>
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022da:	d017      	beq.n	800230c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80022dc:	e063      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f000 f989 	bl	8002604 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002300:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	609a      	str	r2, [r3, #8]
      break;
 800230a:	e04c      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6899      	ldr	r1, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f000 f972 	bl	8002604 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800232e:	609a      	str	r2, [r3, #8]
      break;
 8002330:	e039      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	461a      	mov	r2, r3
 8002340:	f000 f8e6 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2150      	movs	r1, #80	; 0x50
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f93f 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 8002350:	e029      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f000 f905 	bl	800256e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2160      	movs	r1, #96	; 0x60
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f92f 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 8002370:	e019      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	f000 f8c6 	bl	8002510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2140      	movs	r1, #64	; 0x40
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f91f 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 8002390:	e009      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4619      	mov	r1, r3
 800239c:	4610      	mov	r0, r2
 800239e:	f000 f916 	bl	80025ce <TIM_ITRx_SetConfig>
      break;
 80023a2:	e000      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80023a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a34      	ldr	r2, [pc, #208]	; (80024f4 <TIM_Base_SetConfig+0xe4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d00f      	beq.n	8002448 <TIM_Base_SetConfig+0x38>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242e:	d00b      	beq.n	8002448 <TIM_Base_SetConfig+0x38>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <TIM_Base_SetConfig+0xe8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d007      	beq.n	8002448 <TIM_Base_SetConfig+0x38>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a30      	ldr	r2, [pc, #192]	; (80024fc <TIM_Base_SetConfig+0xec>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d003      	beq.n	8002448 <TIM_Base_SetConfig+0x38>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a2f      	ldr	r2, [pc, #188]	; (8002500 <TIM_Base_SetConfig+0xf0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d108      	bne.n	800245a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <TIM_Base_SetConfig+0xe4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01b      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d017      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <TIM_Base_SetConfig+0xe8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a21      	ldr	r2, [pc, #132]	; (80024fc <TIM_Base_SetConfig+0xec>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00f      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <TIM_Base_SetConfig+0xf0>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d00b      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <TIM_Base_SetConfig+0xf4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d007      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <TIM_Base_SetConfig+0xf8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d003      	beq.n	800249a <TIM_Base_SetConfig+0x8a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <TIM_Base_SetConfig+0xfc>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d108      	bne.n	80024ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <TIM_Base_SetConfig+0xe4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d103      	bne.n	80024e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	615a      	str	r2, [r3, #20]
}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40000400 	.word	0x40000400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40000c00 	.word	0x40000c00
 8002504:	40014000 	.word	0x40014000
 8002508:	40014400 	.word	0x40014400
 800250c:	40014800 	.word	0x40014800

08002510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	f023 0201 	bic.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800253a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f023 030a 	bic.w	r3, r3, #10
 800254c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	621a      	str	r2, [r3, #32]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800256e:	b480      	push	{r7}
 8002570:	b087      	sub	sp, #28
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
 8002576:	60b9      	str	r1, [r7, #8]
 8002578:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0210 	bic.w	r2, r3, #16
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	031b      	lsls	r3, r3, #12
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f043 0307 	orr.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	609a      	str	r2, [r3, #8]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
 8002610:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800261e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	021a      	lsls	r2, r3, #8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	431a      	orrs	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	609a      	str	r2, [r3, #8]
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e050      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d018      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a8:	d013      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a16      	ldr	r2, [pc, #88]	; (8002714 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d009      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a15      	ldr	r2, [pc, #84]	; (8002718 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000
 8002710:	40000400 	.word	0x40000400
 8002714:	40000800 	.word	0x40000800
 8002718:	40000c00 	.word	0x40000c00
 800271c:	40014000 	.word	0x40014000

08002720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03f      	b.n	80027da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fb0c 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fbdb 	bl	8002f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b088      	sub	sp, #32
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b20      	cmp	r3, #32
 8002800:	f040 8083 	bne.w	800290a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_UART_Transmit+0x2e>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e07b      	b.n	800290c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x40>
 800281e:	2302      	movs	r3, #2
 8002820:	e074      	b.n	800290c <HAL_UART_Transmit+0x12a>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2221      	movs	r2, #33	; 0x21
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002838:	f7fe fc80 	bl	800113c <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002852:	e042      	b.n	80028da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	d122      	bne.n	80028b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f9fa 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e042      	b.n	800290c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3302      	adds	r3, #2
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	e017      	b.n	80028da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e013      	b.n	80028da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f9d7 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e01f      	b.n	800290c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1b7      	bne.n	8002854 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2140      	movs	r1, #64	; 0x40
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9be 	bl	8002c70 <UART_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e006      	b.n	800290c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b20      	cmp	r3, #32
 800292c:	d130      	bne.n	8002990 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_UART_Transmit_IT+0x26>
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e029      	b.n	8002992 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_UART_Transmit_IT+0x38>
 8002948:	2302      	movs	r3, #2
 800294a:	e022      	b.n	8002992 <HAL_UART_Transmit_IT+0x7e>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	88fa      	ldrh	r2, [r7, #6]
 800295e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2221      	movs	r2, #33	; 0x21
 8002970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800298a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800299e:	b480      	push	{r7}
 80029a0:	b085      	sub	sp, #20
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	4613      	mov	r3, r2
 80029aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b20      	cmp	r3, #32
 80029b6:	d140      	bne.n	8002a3a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d002      	beq.n	80029c4 <HAL_UART_Receive_IT+0x26>
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e039      	b.n	8002a3c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_UART_Receive_IT+0x38>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e032      	b.n	8002a3c <HAL_UART_Receive_IT+0x9e>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	88fa      	ldrh	r2, [r7, #6]
 80029e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2222      	movs	r2, #34	; 0x22
 80029fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a14:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0220 	orr.w	r2, r2, #32
 8002a34:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_UART_IRQHandler+0x52>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f9d6 	bl	8002e44 <UART_Receive_IT>
      return;
 8002a98:	e0d1      	b.n	8002c3e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80b0 	beq.w	8002c02 <HAL_UART_IRQHandler+0x1ba>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_UART_IRQHandler+0x70>
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80a5 	beq.w	8002c02 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x90>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_UART_IRQHandler+0xb0>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	f043 0202 	orr.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_UART_IRQHandler+0xd0>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b10:	f043 0204 	orr.w	r2, r3, #4
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00f      	beq.n	8002b42 <HAL_UART_IRQHandler+0xfa>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_UART_IRQHandler+0xee>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	f043 0208 	orr.w	r2, r3, #8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d078      	beq.n	8002c3c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d007      	beq.n	8002b64 <HAL_UART_IRQHandler+0x11c>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f970 	bl	8002e44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d102      	bne.n	8002b8c <HAL_UART_IRQHandler+0x144>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d031      	beq.n	8002bf0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f8b9 	bl	8002d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d123      	bne.n	8002be8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	4a21      	ldr	r2, [pc, #132]	; (8002c44 <HAL_UART_IRQHandler+0x1fc>)
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fbd6 	bl	8001376 <HAL_DMA_Abort_IT>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	e00e      	b.n	8002bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f83b 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be6:	e00a      	b.n	8002bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f837 	bl	8002c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bee:	e006      	b.n	8002bfe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f833 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002bfc:	e01e      	b.n	8002c3c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfe:	bf00      	nop
    return;
 8002c00:	e01c      	b.n	8002c3c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_UART_IRQHandler+0x1d6>
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8a6 	bl	8002d68 <UART_Transmit_IT>
    return;
 8002c1c:	e00f      	b.n	8002c3e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_UART_IRQHandler+0x1f6>
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f8ee 	bl	8002e14 <UART_EndTransmit_IT>
    return;
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c3c:	bf00      	nop
  }
}
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	08002d41 	.word	0x08002d41

08002c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c80:	e02c      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c88:	d028      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c90:	f7fe fa54 	bl	800113c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d21d      	bcs.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e00f      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d0c3      	beq.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff ff7e 	bl	8002c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b21      	cmp	r3, #33	; 0x21
 8002d7a:	d144      	bne.n	8002e06 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d84:	d11a      	bne.n	8002dbc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]
 8002dae:	e00e      	b.n	8002dce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	621a      	str	r2, [r3, #32]
 8002dba:	e008      	b.n	8002dce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	1c59      	adds	r1, r3, #1
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6211      	str	r1, [r2, #32]
 8002dc6:	781a      	ldrb	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e000      	b.n	8002e08 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff07 	bl	8002c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b22      	cmp	r3, #34	; 0x22
 8002e56:	d171      	bne.n	8002f3c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e60:	d123      	bne.n	8002eaa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10e      	bne.n	8002e8e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e8c:	e029      	b.n	8002ee2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea8:	e01b      	b.n	8002ee2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10a      	bne.n	8002ec8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6858      	ldr	r0, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6291      	str	r1, [r2, #40]	; 0x28
 8002ec2:	b2c2      	uxtb	r2, r0
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e00c      	b.n	8002ee2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	1c58      	adds	r0, r3, #1
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	6288      	str	r0, [r1, #40]	; 0x28
 8002eda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d120      	bne.n	8002f38 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0220 	bic.w	r2, r2, #32
 8002f04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fe84 	bl	8000c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e002      	b.n	8002f3e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	e000      	b.n	8002f3e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f3c:	2302      	movs	r3, #2
  }
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f8a:	f023 030c 	bic.w	r3, r3, #12
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68f9      	ldr	r1, [r7, #12]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699a      	ldr	r2, [r3, #24]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	f040 818b 	bne.w	80032d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4ac1      	ldr	r2, [pc, #772]	; (80032c4 <UART_SetConfig+0x37c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d005      	beq.n	8002fd0 <UART_SetConfig+0x88>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4abf      	ldr	r2, [pc, #764]	; (80032c8 <UART_SetConfig+0x380>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f040 80bd 	bne.w	800314a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fd0:	f7fe fff8 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8002fd4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	461d      	mov	r5, r3
 8002fda:	f04f 0600 	mov.w	r6, #0
 8002fde:	46a8      	mov	r8, r5
 8002fe0:	46b1      	mov	r9, r6
 8002fe2:	eb18 0308 	adds.w	r3, r8, r8
 8002fe6:	eb49 0409 	adc.w	r4, r9, r9
 8002fea:	4698      	mov	r8, r3
 8002fec:	46a1      	mov	r9, r4
 8002fee:	eb18 0805 	adds.w	r8, r8, r5
 8002ff2:	eb49 0906 	adc.w	r9, r9, r6
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003002:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003006:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800300a:	4688      	mov	r8, r1
 800300c:	4691      	mov	r9, r2
 800300e:	eb18 0005 	adds.w	r0, r8, r5
 8003012:	eb49 0106 	adc.w	r1, r9, r6
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	461d      	mov	r5, r3
 800301c:	f04f 0600 	mov.w	r6, #0
 8003020:	196b      	adds	r3, r5, r5
 8003022:	eb46 0406 	adc.w	r4, r6, r6
 8003026:	461a      	mov	r2, r3
 8003028:	4623      	mov	r3, r4
 800302a:	f7fd f931 	bl	8000290 <__aeabi_uldivmod>
 800302e:	4603      	mov	r3, r0
 8003030:	460c      	mov	r4, r1
 8003032:	461a      	mov	r2, r3
 8003034:	4ba5      	ldr	r3, [pc, #660]	; (80032cc <UART_SetConfig+0x384>)
 8003036:	fba3 2302 	umull	r2, r3, r3, r2
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	461d      	mov	r5, r3
 8003044:	f04f 0600 	mov.w	r6, #0
 8003048:	46a9      	mov	r9, r5
 800304a:	46b2      	mov	sl, r6
 800304c:	eb19 0309 	adds.w	r3, r9, r9
 8003050:	eb4a 040a 	adc.w	r4, sl, sl
 8003054:	4699      	mov	r9, r3
 8003056:	46a2      	mov	sl, r4
 8003058:	eb19 0905 	adds.w	r9, r9, r5
 800305c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003070:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003074:	4689      	mov	r9, r1
 8003076:	4692      	mov	sl, r2
 8003078:	eb19 0005 	adds.w	r0, r9, r5
 800307c:	eb4a 0106 	adc.w	r1, sl, r6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	461d      	mov	r5, r3
 8003086:	f04f 0600 	mov.w	r6, #0
 800308a:	196b      	adds	r3, r5, r5
 800308c:	eb46 0406 	adc.w	r4, r6, r6
 8003090:	461a      	mov	r2, r3
 8003092:	4623      	mov	r3, r4
 8003094:	f7fd f8fc 	bl	8000290 <__aeabi_uldivmod>
 8003098:	4603      	mov	r3, r0
 800309a:	460c      	mov	r4, r1
 800309c:	461a      	mov	r2, r3
 800309e:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <UART_SetConfig+0x384>)
 80030a0:	fba3 1302 	umull	r1, r3, r3, r2
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	2164      	movs	r1, #100	; 0x64
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	3332      	adds	r3, #50	; 0x32
 80030b2:	4a86      	ldr	r2, [pc, #536]	; (80032cc <UART_SetConfig+0x384>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	095b      	lsrs	r3, r3, #5
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030c0:	4498      	add	r8, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	461d      	mov	r5, r3
 80030c6:	f04f 0600 	mov.w	r6, #0
 80030ca:	46a9      	mov	r9, r5
 80030cc:	46b2      	mov	sl, r6
 80030ce:	eb19 0309 	adds.w	r3, r9, r9
 80030d2:	eb4a 040a 	adc.w	r4, sl, sl
 80030d6:	4699      	mov	r9, r3
 80030d8:	46a2      	mov	sl, r4
 80030da:	eb19 0905 	adds.w	r9, r9, r5
 80030de:	eb4a 0a06 	adc.w	sl, sl, r6
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030f6:	4689      	mov	r9, r1
 80030f8:	4692      	mov	sl, r2
 80030fa:	eb19 0005 	adds.w	r0, r9, r5
 80030fe:	eb4a 0106 	adc.w	r1, sl, r6
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	461d      	mov	r5, r3
 8003108:	f04f 0600 	mov.w	r6, #0
 800310c:	196b      	adds	r3, r5, r5
 800310e:	eb46 0406 	adc.w	r4, r6, r6
 8003112:	461a      	mov	r2, r3
 8003114:	4623      	mov	r3, r4
 8003116:	f7fd f8bb 	bl	8000290 <__aeabi_uldivmod>
 800311a:	4603      	mov	r3, r0
 800311c:	460c      	mov	r4, r1
 800311e:	461a      	mov	r2, r3
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <UART_SetConfig+0x384>)
 8003122:	fba3 1302 	umull	r1, r3, r3, r2
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	2164      	movs	r1, #100	; 0x64
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	3332      	adds	r3, #50	; 0x32
 8003134:	4a65      	ldr	r2, [pc, #404]	; (80032cc <UART_SetConfig+0x384>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	f003 0207 	and.w	r2, r3, #7
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4442      	add	r2, r8
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e26f      	b.n	800362a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800314a:	f7fe ff27 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 800314e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	461d      	mov	r5, r3
 8003154:	f04f 0600 	mov.w	r6, #0
 8003158:	46a8      	mov	r8, r5
 800315a:	46b1      	mov	r9, r6
 800315c:	eb18 0308 	adds.w	r3, r8, r8
 8003160:	eb49 0409 	adc.w	r4, r9, r9
 8003164:	4698      	mov	r8, r3
 8003166:	46a1      	mov	r9, r4
 8003168:	eb18 0805 	adds.w	r8, r8, r5
 800316c:	eb49 0906 	adc.w	r9, r9, r6
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800317c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003180:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003184:	4688      	mov	r8, r1
 8003186:	4691      	mov	r9, r2
 8003188:	eb18 0005 	adds.w	r0, r8, r5
 800318c:	eb49 0106 	adc.w	r1, r9, r6
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	461d      	mov	r5, r3
 8003196:	f04f 0600 	mov.w	r6, #0
 800319a:	196b      	adds	r3, r5, r5
 800319c:	eb46 0406 	adc.w	r4, r6, r6
 80031a0:	461a      	mov	r2, r3
 80031a2:	4623      	mov	r3, r4
 80031a4:	f7fd f874 	bl	8000290 <__aeabi_uldivmod>
 80031a8:	4603      	mov	r3, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <UART_SetConfig+0x384>)
 80031b0:	fba3 2302 	umull	r2, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	461d      	mov	r5, r3
 80031be:	f04f 0600 	mov.w	r6, #0
 80031c2:	46a9      	mov	r9, r5
 80031c4:	46b2      	mov	sl, r6
 80031c6:	eb19 0309 	adds.w	r3, r9, r9
 80031ca:	eb4a 040a 	adc.w	r4, sl, sl
 80031ce:	4699      	mov	r9, r3
 80031d0:	46a2      	mov	sl, r4
 80031d2:	eb19 0905 	adds.w	r9, r9, r5
 80031d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80031da:	f04f 0100 	mov.w	r1, #0
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ee:	4689      	mov	r9, r1
 80031f0:	4692      	mov	sl, r2
 80031f2:	eb19 0005 	adds.w	r0, r9, r5
 80031f6:	eb4a 0106 	adc.w	r1, sl, r6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	461d      	mov	r5, r3
 8003200:	f04f 0600 	mov.w	r6, #0
 8003204:	196b      	adds	r3, r5, r5
 8003206:	eb46 0406 	adc.w	r4, r6, r6
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	f7fd f83f 	bl	8000290 <__aeabi_uldivmod>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	461a      	mov	r2, r3
 8003218:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <UART_SetConfig+0x384>)
 800321a:	fba3 1302 	umull	r1, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2164      	movs	r1, #100	; 0x64
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	3332      	adds	r3, #50	; 0x32
 800322c:	4a27      	ldr	r2, [pc, #156]	; (80032cc <UART_SetConfig+0x384>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800323a:	4498      	add	r8, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	461d      	mov	r5, r3
 8003240:	f04f 0600 	mov.w	r6, #0
 8003244:	46a9      	mov	r9, r5
 8003246:	46b2      	mov	sl, r6
 8003248:	eb19 0309 	adds.w	r3, r9, r9
 800324c:	eb4a 040a 	adc.w	r4, sl, sl
 8003250:	4699      	mov	r9, r3
 8003252:	46a2      	mov	sl, r4
 8003254:	eb19 0905 	adds.w	r9, r9, r5
 8003258:	eb4a 0a06 	adc.w	sl, sl, r6
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800326c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003270:	4689      	mov	r9, r1
 8003272:	4692      	mov	sl, r2
 8003274:	eb19 0005 	adds.w	r0, r9, r5
 8003278:	eb4a 0106 	adc.w	r1, sl, r6
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	461d      	mov	r5, r3
 8003282:	f04f 0600 	mov.w	r6, #0
 8003286:	196b      	adds	r3, r5, r5
 8003288:	eb46 0406 	adc.w	r4, r6, r6
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	f7fc fffe 	bl	8000290 <__aeabi_uldivmod>
 8003294:	4603      	mov	r3, r0
 8003296:	460c      	mov	r4, r1
 8003298:	461a      	mov	r2, r3
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <UART_SetConfig+0x384>)
 800329c:	fba3 1302 	umull	r1, r3, r3, r2
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	2164      	movs	r1, #100	; 0x64
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3332      	adds	r3, #50	; 0x32
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <UART_SetConfig+0x384>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	f003 0207 	and.w	r2, r3, #7
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4442      	add	r2, r8
 80032c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032c2:	e1b2      	b.n	800362a <UART_SetConfig+0x6e2>
 80032c4:	40011000 	.word	0x40011000
 80032c8:	40011400 	.word	0x40011400
 80032cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4ad7      	ldr	r2, [pc, #860]	; (8003634 <UART_SetConfig+0x6ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d005      	beq.n	80032e6 <UART_SetConfig+0x39e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4ad6      	ldr	r2, [pc, #856]	; (8003638 <UART_SetConfig+0x6f0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	f040 80d1 	bne.w	8003488 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032e6:	f7fe fe6d 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 80032ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	469a      	mov	sl, r3
 80032f0:	f04f 0b00 	mov.w	fp, #0
 80032f4:	46d0      	mov	r8, sl
 80032f6:	46d9      	mov	r9, fp
 80032f8:	eb18 0308 	adds.w	r3, r8, r8
 80032fc:	eb49 0409 	adc.w	r4, r9, r9
 8003300:	4698      	mov	r8, r3
 8003302:	46a1      	mov	r9, r4
 8003304:	eb18 080a 	adds.w	r8, r8, sl
 8003308:	eb49 090b 	adc.w	r9, r9, fp
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003318:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800331c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003320:	4688      	mov	r8, r1
 8003322:	4691      	mov	r9, r2
 8003324:	eb1a 0508 	adds.w	r5, sl, r8
 8003328:	eb4b 0609 	adc.w	r6, fp, r9
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4619      	mov	r1, r3
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	0094      	lsls	r4, r2, #2
 8003340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003344:	008b      	lsls	r3, r1, #2
 8003346:	461a      	mov	r2, r3
 8003348:	4623      	mov	r3, r4
 800334a:	4628      	mov	r0, r5
 800334c:	4631      	mov	r1, r6
 800334e:	f7fc ff9f 	bl	8000290 <__aeabi_uldivmod>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	461a      	mov	r2, r3
 8003358:	4bb8      	ldr	r3, [pc, #736]	; (800363c <UART_SetConfig+0x6f4>)
 800335a:	fba3 2302 	umull	r2, r3, r3, r2
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	469b      	mov	fp, r3
 8003368:	f04f 0c00 	mov.w	ip, #0
 800336c:	46d9      	mov	r9, fp
 800336e:	46e2      	mov	sl, ip
 8003370:	eb19 0309 	adds.w	r3, r9, r9
 8003374:	eb4a 040a 	adc.w	r4, sl, sl
 8003378:	4699      	mov	r9, r3
 800337a:	46a2      	mov	sl, r4
 800337c:	eb19 090b 	adds.w	r9, r9, fp
 8003380:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003390:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003394:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003398:	4689      	mov	r9, r1
 800339a:	4692      	mov	sl, r2
 800339c:	eb1b 0509 	adds.w	r5, fp, r9
 80033a0:	eb4c 060a 	adc.w	r6, ip, sl
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	0094      	lsls	r4, r2, #2
 80033b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033bc:	008b      	lsls	r3, r1, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	4628      	mov	r0, r5
 80033c4:	4631      	mov	r1, r6
 80033c6:	f7fc ff63 	bl	8000290 <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b9a      	ldr	r3, [pc, #616]	; (800363c <UART_SetConfig+0x6f4>)
 80033d2:	fba3 1302 	umull	r1, r3, r3, r2
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	2164      	movs	r1, #100	; 0x64
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	3332      	adds	r3, #50	; 0x32
 80033e4:	4a95      	ldr	r2, [pc, #596]	; (800363c <UART_SetConfig+0x6f4>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	4498      	add	r8, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	469b      	mov	fp, r3
 80033f6:	f04f 0c00 	mov.w	ip, #0
 80033fa:	46d9      	mov	r9, fp
 80033fc:	46e2      	mov	sl, ip
 80033fe:	eb19 0309 	adds.w	r3, r9, r9
 8003402:	eb4a 040a 	adc.w	r4, sl, sl
 8003406:	4699      	mov	r9, r3
 8003408:	46a2      	mov	sl, r4
 800340a:	eb19 090b 	adds.w	r9, r9, fp
 800340e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800341e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003422:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003426:	4689      	mov	r9, r1
 8003428:	4692      	mov	sl, r2
 800342a:	eb1b 0509 	adds.w	r5, fp, r9
 800342e:	eb4c 060a 	adc.w	r6, ip, sl
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4619      	mov	r1, r3
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	f04f 0400 	mov.w	r4, #0
 8003444:	0094      	lsls	r4, r2, #2
 8003446:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800344a:	008b      	lsls	r3, r1, #2
 800344c:	461a      	mov	r2, r3
 800344e:	4623      	mov	r3, r4
 8003450:	4628      	mov	r0, r5
 8003452:	4631      	mov	r1, r6
 8003454:	f7fc ff1c 	bl	8000290 <__aeabi_uldivmod>
 8003458:	4603      	mov	r3, r0
 800345a:	460c      	mov	r4, r1
 800345c:	461a      	mov	r2, r3
 800345e:	4b77      	ldr	r3, [pc, #476]	; (800363c <UART_SetConfig+0x6f4>)
 8003460:	fba3 1302 	umull	r1, r3, r3, r2
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	2164      	movs	r1, #100	; 0x64
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	3332      	adds	r3, #50	; 0x32
 8003472:	4a72      	ldr	r2, [pc, #456]	; (800363c <UART_SetConfig+0x6f4>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	f003 020f 	and.w	r2, r3, #15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4442      	add	r2, r8
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	e0d0      	b.n	800362a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7fe fd88 	bl	8001f9c <HAL_RCC_GetPCLK1Freq>
 800348c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	469a      	mov	sl, r3
 8003492:	f04f 0b00 	mov.w	fp, #0
 8003496:	46d0      	mov	r8, sl
 8003498:	46d9      	mov	r9, fp
 800349a:	eb18 0308 	adds.w	r3, r8, r8
 800349e:	eb49 0409 	adc.w	r4, r9, r9
 80034a2:	4698      	mov	r8, r3
 80034a4:	46a1      	mov	r9, r4
 80034a6:	eb18 080a 	adds.w	r8, r8, sl
 80034aa:	eb49 090b 	adc.w	r9, r9, fp
 80034ae:	f04f 0100 	mov.w	r1, #0
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034c2:	4688      	mov	r8, r1
 80034c4:	4691      	mov	r9, r2
 80034c6:	eb1a 0508 	adds.w	r5, sl, r8
 80034ca:	eb4b 0609 	adc.w	r6, fp, r9
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	f04f 0400 	mov.w	r4, #0
 80034e0:	0094      	lsls	r4, r2, #2
 80034e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034e6:	008b      	lsls	r3, r1, #2
 80034e8:	461a      	mov	r2, r3
 80034ea:	4623      	mov	r3, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	4631      	mov	r1, r6
 80034f0:	f7fc fece 	bl	8000290 <__aeabi_uldivmod>
 80034f4:	4603      	mov	r3, r0
 80034f6:	460c      	mov	r4, r1
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b50      	ldr	r3, [pc, #320]	; (800363c <UART_SetConfig+0x6f4>)
 80034fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	469b      	mov	fp, r3
 800350a:	f04f 0c00 	mov.w	ip, #0
 800350e:	46d9      	mov	r9, fp
 8003510:	46e2      	mov	sl, ip
 8003512:	eb19 0309 	adds.w	r3, r9, r9
 8003516:	eb4a 040a 	adc.w	r4, sl, sl
 800351a:	4699      	mov	r9, r3
 800351c:	46a2      	mov	sl, r4
 800351e:	eb19 090b 	adds.w	r9, r9, fp
 8003522:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800353a:	4689      	mov	r9, r1
 800353c:	4692      	mov	sl, r2
 800353e:	eb1b 0509 	adds.w	r5, fp, r9
 8003542:	eb4c 060a 	adc.w	r6, ip, sl
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0094      	lsls	r4, r2, #2
 800355a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800355e:	008b      	lsls	r3, r1, #2
 8003560:	461a      	mov	r2, r3
 8003562:	4623      	mov	r3, r4
 8003564:	4628      	mov	r0, r5
 8003566:	4631      	mov	r1, r6
 8003568:	f7fc fe92 	bl	8000290 <__aeabi_uldivmod>
 800356c:	4603      	mov	r3, r0
 800356e:	460c      	mov	r4, r1
 8003570:	461a      	mov	r2, r3
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <UART_SetConfig+0x6f4>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a2d      	ldr	r2, [pc, #180]	; (800363c <UART_SetConfig+0x6f4>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003592:	4498      	add	r8, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	469b      	mov	fp, r3
 8003598:	f04f 0c00 	mov.w	ip, #0
 800359c:	46d9      	mov	r9, fp
 800359e:	46e2      	mov	sl, ip
 80035a0:	eb19 0309 	adds.w	r3, r9, r9
 80035a4:	eb4a 040a 	adc.w	r4, sl, sl
 80035a8:	4699      	mov	r9, r3
 80035aa:	46a2      	mov	sl, r4
 80035ac:	eb19 090b 	adds.w	r9, r9, fp
 80035b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035c8:	4689      	mov	r9, r1
 80035ca:	4692      	mov	sl, r2
 80035cc:	eb1b 0509 	adds.w	r5, fp, r9
 80035d0:	eb4c 060a 	adc.w	r6, ip, sl
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	4619      	mov	r1, r3
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f04f 0400 	mov.w	r4, #0
 80035e6:	0094      	lsls	r4, r2, #2
 80035e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ec:	008b      	lsls	r3, r1, #2
 80035ee:	461a      	mov	r2, r3
 80035f0:	4623      	mov	r3, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	4631      	mov	r1, r6
 80035f6:	f7fc fe4b 	bl	8000290 <__aeabi_uldivmod>
 80035fa:	4603      	mov	r3, r0
 80035fc:	460c      	mov	r4, r1
 80035fe:	461a      	mov	r2, r3
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <UART_SetConfig+0x6f4>)
 8003602:	fba3 1302 	umull	r1, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2164      	movs	r1, #100	; 0x64
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	3332      	adds	r3, #50	; 0x32
 8003614:	4a09      	ldr	r2, [pc, #36]	; (800363c <UART_SetConfig+0x6f4>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4442      	add	r2, r8
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	e7ff      	b.n	800362a <UART_SetConfig+0x6e2>
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003634:	40011000 	.word	0x40011000
 8003638:	40011400 	.word	0x40011400
 800363c:	51eb851f 	.word	0x51eb851f

08003640 <__errno>:
 8003640:	4b01      	ldr	r3, [pc, #4]	; (8003648 <__errno+0x8>)
 8003642:	6818      	ldr	r0, [r3, #0]
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000014 	.word	0x20000014

0800364c <__libc_init_array>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0d      	ldr	r6, [pc, #52]	; (8003684 <__libc_init_array+0x38>)
 8003650:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <__libc_init_array+0x3c>)
 8003652:	1ba4      	subs	r4, r4, r6
 8003654:	10a4      	asrs	r4, r4, #2
 8003656:	2500      	movs	r5, #0
 8003658:	42a5      	cmp	r5, r4
 800365a:	d109      	bne.n	8003670 <__libc_init_array+0x24>
 800365c:	4e0b      	ldr	r6, [pc, #44]	; (800368c <__libc_init_array+0x40>)
 800365e:	4c0c      	ldr	r4, [pc, #48]	; (8003690 <__libc_init_array+0x44>)
 8003660:	f001 f976 	bl	8004950 <_init>
 8003664:	1ba4      	subs	r4, r4, r6
 8003666:	10a4      	asrs	r4, r4, #2
 8003668:	2500      	movs	r5, #0
 800366a:	42a5      	cmp	r5, r4
 800366c:	d105      	bne.n	800367a <__libc_init_array+0x2e>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003674:	4798      	blx	r3
 8003676:	3501      	adds	r5, #1
 8003678:	e7ee      	b.n	8003658 <__libc_init_array+0xc>
 800367a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367e:	4798      	blx	r3
 8003680:	3501      	adds	r5, #1
 8003682:	e7f2      	b.n	800366a <__libc_init_array+0x1e>
 8003684:	08004bac 	.word	0x08004bac
 8003688:	08004bac 	.word	0x08004bac
 800368c:	08004bac 	.word	0x08004bac
 8003690:	08004bb0 	.word	0x08004bb0

08003694 <memset>:
 8003694:	4402      	add	r2, r0
 8003696:	4603      	mov	r3, r0
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	f803 1b01 	strb.w	r1, [r3], #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <iprintf>:
 80036a4:	b40f      	push	{r0, r1, r2, r3}
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <iprintf+0x2c>)
 80036a8:	b513      	push	{r0, r1, r4, lr}
 80036aa:	681c      	ldr	r4, [r3, #0]
 80036ac:	b124      	cbz	r4, 80036b8 <iprintf+0x14>
 80036ae:	69a3      	ldr	r3, [r4, #24]
 80036b0:	b913      	cbnz	r3, 80036b8 <iprintf+0x14>
 80036b2:	4620      	mov	r0, r4
 80036b4:	f000 fa56 	bl	8003b64 <__sinit>
 80036b8:	ab05      	add	r3, sp, #20
 80036ba:	9a04      	ldr	r2, [sp, #16]
 80036bc:	68a1      	ldr	r1, [r4, #8]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 fd61 	bl	8004188 <_vfiprintf_r>
 80036c6:	b002      	add	sp, #8
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036cc:	b004      	add	sp, #16
 80036ce:	4770      	bx	lr
 80036d0:	20000014 	.word	0x20000014

080036d4 <putchar>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <putchar+0x24>)
 80036d8:	681c      	ldr	r4, [r3, #0]
 80036da:	4605      	mov	r5, r0
 80036dc:	b124      	cbz	r4, 80036e8 <putchar+0x14>
 80036de:	69a3      	ldr	r3, [r4, #24]
 80036e0:	b913      	cbnz	r3, 80036e8 <putchar+0x14>
 80036e2:	4620      	mov	r0, r4
 80036e4:	f000 fa3e 	bl	8003b64 <__sinit>
 80036e8:	68a2      	ldr	r2, [r4, #8]
 80036ea:	4629      	mov	r1, r5
 80036ec:	4620      	mov	r0, r4
 80036ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036f2:	f000 bfe7 	b.w	80046c4 <_putc_r>
 80036f6:	bf00      	nop
 80036f8:	20000014 	.word	0x20000014

080036fc <_puts_r>:
 80036fc:	b570      	push	{r4, r5, r6, lr}
 80036fe:	460e      	mov	r6, r1
 8003700:	4605      	mov	r5, r0
 8003702:	b118      	cbz	r0, 800370c <_puts_r+0x10>
 8003704:	6983      	ldr	r3, [r0, #24]
 8003706:	b90b      	cbnz	r3, 800370c <_puts_r+0x10>
 8003708:	f000 fa2c 	bl	8003b64 <__sinit>
 800370c:	69ab      	ldr	r3, [r5, #24]
 800370e:	68ac      	ldr	r4, [r5, #8]
 8003710:	b913      	cbnz	r3, 8003718 <_puts_r+0x1c>
 8003712:	4628      	mov	r0, r5
 8003714:	f000 fa26 	bl	8003b64 <__sinit>
 8003718:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <_puts_r+0xac>)
 800371a:	429c      	cmp	r4, r3
 800371c:	d117      	bne.n	800374e <_puts_r+0x52>
 800371e:	686c      	ldr	r4, [r5, #4]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	071b      	lsls	r3, r3, #28
 8003724:	d51d      	bpl.n	8003762 <_puts_r+0x66>
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	b1db      	cbz	r3, 8003762 <_puts_r+0x66>
 800372a:	3e01      	subs	r6, #1
 800372c:	68a3      	ldr	r3, [r4, #8]
 800372e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003732:	3b01      	subs	r3, #1
 8003734:	60a3      	str	r3, [r4, #8]
 8003736:	b9e9      	cbnz	r1, 8003774 <_puts_r+0x78>
 8003738:	2b00      	cmp	r3, #0
 800373a:	da2e      	bge.n	800379a <_puts_r+0x9e>
 800373c:	4622      	mov	r2, r4
 800373e:	210a      	movs	r1, #10
 8003740:	4628      	mov	r0, r5
 8003742:	f000 f85f 	bl	8003804 <__swbuf_r>
 8003746:	3001      	adds	r0, #1
 8003748:	d011      	beq.n	800376e <_puts_r+0x72>
 800374a:	200a      	movs	r0, #10
 800374c:	e011      	b.n	8003772 <_puts_r+0x76>
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <_puts_r+0xb0>)
 8003750:	429c      	cmp	r4, r3
 8003752:	d101      	bne.n	8003758 <_puts_r+0x5c>
 8003754:	68ac      	ldr	r4, [r5, #8]
 8003756:	e7e3      	b.n	8003720 <_puts_r+0x24>
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <_puts_r+0xb4>)
 800375a:	429c      	cmp	r4, r3
 800375c:	bf08      	it	eq
 800375e:	68ec      	ldreq	r4, [r5, #12]
 8003760:	e7de      	b.n	8003720 <_puts_r+0x24>
 8003762:	4621      	mov	r1, r4
 8003764:	4628      	mov	r0, r5
 8003766:	f000 f89f 	bl	80038a8 <__swsetup_r>
 800376a:	2800      	cmp	r0, #0
 800376c:	d0dd      	beq.n	800372a <_puts_r+0x2e>
 800376e:	f04f 30ff 	mov.w	r0, #4294967295
 8003772:	bd70      	pop	{r4, r5, r6, pc}
 8003774:	2b00      	cmp	r3, #0
 8003776:	da04      	bge.n	8003782 <_puts_r+0x86>
 8003778:	69a2      	ldr	r2, [r4, #24]
 800377a:	429a      	cmp	r2, r3
 800377c:	dc06      	bgt.n	800378c <_puts_r+0x90>
 800377e:	290a      	cmp	r1, #10
 8003780:	d004      	beq.n	800378c <_puts_r+0x90>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	6022      	str	r2, [r4, #0]
 8003788:	7019      	strb	r1, [r3, #0]
 800378a:	e7cf      	b.n	800372c <_puts_r+0x30>
 800378c:	4622      	mov	r2, r4
 800378e:	4628      	mov	r0, r5
 8003790:	f000 f838 	bl	8003804 <__swbuf_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d1c9      	bne.n	800372c <_puts_r+0x30>
 8003798:	e7e9      	b.n	800376e <_puts_r+0x72>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	200a      	movs	r0, #10
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	6022      	str	r2, [r4, #0]
 80037a2:	7018      	strb	r0, [r3, #0]
 80037a4:	e7e5      	b.n	8003772 <_puts_r+0x76>
 80037a6:	bf00      	nop
 80037a8:	08004b30 	.word	0x08004b30
 80037ac:	08004b50 	.word	0x08004b50
 80037b0:	08004b10 	.word	0x08004b10

080037b4 <puts>:
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <puts+0xc>)
 80037b6:	4601      	mov	r1, r0
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	f7ff bf9f 	b.w	80036fc <_puts_r>
 80037be:	bf00      	nop
 80037c0:	20000014 	.word	0x20000014

080037c4 <siprintf>:
 80037c4:	b40e      	push	{r1, r2, r3}
 80037c6:	b500      	push	{lr}
 80037c8:	b09c      	sub	sp, #112	; 0x70
 80037ca:	ab1d      	add	r3, sp, #116	; 0x74
 80037cc:	9002      	str	r0, [sp, #8]
 80037ce:	9006      	str	r0, [sp, #24]
 80037d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d4:	4809      	ldr	r0, [pc, #36]	; (80037fc <siprintf+0x38>)
 80037d6:	9107      	str	r1, [sp, #28]
 80037d8:	9104      	str	r1, [sp, #16]
 80037da:	4909      	ldr	r1, [pc, #36]	; (8003800 <siprintf+0x3c>)
 80037dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80037e0:	9105      	str	r1, [sp, #20]
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	9301      	str	r3, [sp, #4]
 80037e6:	a902      	add	r1, sp, #8
 80037e8:	f000 fbac 	bl	8003f44 <_svfiprintf_r>
 80037ec:	9b02      	ldr	r3, [sp, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	b01c      	add	sp, #112	; 0x70
 80037f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037f8:	b003      	add	sp, #12
 80037fa:	4770      	bx	lr
 80037fc:	20000014 	.word	0x20000014
 8003800:	ffff0208 	.word	0xffff0208

08003804 <__swbuf_r>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	460e      	mov	r6, r1
 8003808:	4614      	mov	r4, r2
 800380a:	4605      	mov	r5, r0
 800380c:	b118      	cbz	r0, 8003816 <__swbuf_r+0x12>
 800380e:	6983      	ldr	r3, [r0, #24]
 8003810:	b90b      	cbnz	r3, 8003816 <__swbuf_r+0x12>
 8003812:	f000 f9a7 	bl	8003b64 <__sinit>
 8003816:	4b21      	ldr	r3, [pc, #132]	; (800389c <__swbuf_r+0x98>)
 8003818:	429c      	cmp	r4, r3
 800381a:	d12a      	bne.n	8003872 <__swbuf_r+0x6e>
 800381c:	686c      	ldr	r4, [r5, #4]
 800381e:	69a3      	ldr	r3, [r4, #24]
 8003820:	60a3      	str	r3, [r4, #8]
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	071a      	lsls	r2, r3, #28
 8003826:	d52e      	bpl.n	8003886 <__swbuf_r+0x82>
 8003828:	6923      	ldr	r3, [r4, #16]
 800382a:	b363      	cbz	r3, 8003886 <__swbuf_r+0x82>
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	6963      	ldr	r3, [r4, #20]
 8003834:	b2f6      	uxtb	r6, r6
 8003836:	4283      	cmp	r3, r0
 8003838:	4637      	mov	r7, r6
 800383a:	dc04      	bgt.n	8003846 <__swbuf_r+0x42>
 800383c:	4621      	mov	r1, r4
 800383e:	4628      	mov	r0, r5
 8003840:	f000 f926 	bl	8003a90 <_fflush_r>
 8003844:	bb28      	cbnz	r0, 8003892 <__swbuf_r+0x8e>
 8003846:	68a3      	ldr	r3, [r4, #8]
 8003848:	3b01      	subs	r3, #1
 800384a:	60a3      	str	r3, [r4, #8]
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	6022      	str	r2, [r4, #0]
 8003852:	701e      	strb	r6, [r3, #0]
 8003854:	6963      	ldr	r3, [r4, #20]
 8003856:	3001      	adds	r0, #1
 8003858:	4283      	cmp	r3, r0
 800385a:	d004      	beq.n	8003866 <__swbuf_r+0x62>
 800385c:	89a3      	ldrh	r3, [r4, #12]
 800385e:	07db      	lsls	r3, r3, #31
 8003860:	d519      	bpl.n	8003896 <__swbuf_r+0x92>
 8003862:	2e0a      	cmp	r6, #10
 8003864:	d117      	bne.n	8003896 <__swbuf_r+0x92>
 8003866:	4621      	mov	r1, r4
 8003868:	4628      	mov	r0, r5
 800386a:	f000 f911 	bl	8003a90 <_fflush_r>
 800386e:	b190      	cbz	r0, 8003896 <__swbuf_r+0x92>
 8003870:	e00f      	b.n	8003892 <__swbuf_r+0x8e>
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <__swbuf_r+0x9c>)
 8003874:	429c      	cmp	r4, r3
 8003876:	d101      	bne.n	800387c <__swbuf_r+0x78>
 8003878:	68ac      	ldr	r4, [r5, #8]
 800387a:	e7d0      	b.n	800381e <__swbuf_r+0x1a>
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <__swbuf_r+0xa0>)
 800387e:	429c      	cmp	r4, r3
 8003880:	bf08      	it	eq
 8003882:	68ec      	ldreq	r4, [r5, #12]
 8003884:	e7cb      	b.n	800381e <__swbuf_r+0x1a>
 8003886:	4621      	mov	r1, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f000 f80d 	bl	80038a8 <__swsetup_r>
 800388e:	2800      	cmp	r0, #0
 8003890:	d0cc      	beq.n	800382c <__swbuf_r+0x28>
 8003892:	f04f 37ff 	mov.w	r7, #4294967295
 8003896:	4638      	mov	r0, r7
 8003898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389a:	bf00      	nop
 800389c:	08004b30 	.word	0x08004b30
 80038a0:	08004b50 	.word	0x08004b50
 80038a4:	08004b10 	.word	0x08004b10

080038a8 <__swsetup_r>:
 80038a8:	4b32      	ldr	r3, [pc, #200]	; (8003974 <__swsetup_r+0xcc>)
 80038aa:	b570      	push	{r4, r5, r6, lr}
 80038ac:	681d      	ldr	r5, [r3, #0]
 80038ae:	4606      	mov	r6, r0
 80038b0:	460c      	mov	r4, r1
 80038b2:	b125      	cbz	r5, 80038be <__swsetup_r+0x16>
 80038b4:	69ab      	ldr	r3, [r5, #24]
 80038b6:	b913      	cbnz	r3, 80038be <__swsetup_r+0x16>
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f953 	bl	8003b64 <__sinit>
 80038be:	4b2e      	ldr	r3, [pc, #184]	; (8003978 <__swsetup_r+0xd0>)
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d10f      	bne.n	80038e4 <__swsetup_r+0x3c>
 80038c4:	686c      	ldr	r4, [r5, #4]
 80038c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	0715      	lsls	r5, r2, #28
 80038ce:	d42c      	bmi.n	800392a <__swsetup_r+0x82>
 80038d0:	06d0      	lsls	r0, r2, #27
 80038d2:	d411      	bmi.n	80038f8 <__swsetup_r+0x50>
 80038d4:	2209      	movs	r2, #9
 80038d6:	6032      	str	r2, [r6, #0]
 80038d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	e03e      	b.n	8003962 <__swsetup_r+0xba>
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <__swsetup_r+0xd4>)
 80038e6:	429c      	cmp	r4, r3
 80038e8:	d101      	bne.n	80038ee <__swsetup_r+0x46>
 80038ea:	68ac      	ldr	r4, [r5, #8]
 80038ec:	e7eb      	b.n	80038c6 <__swsetup_r+0x1e>
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <__swsetup_r+0xd8>)
 80038f0:	429c      	cmp	r4, r3
 80038f2:	bf08      	it	eq
 80038f4:	68ec      	ldreq	r4, [r5, #12]
 80038f6:	e7e6      	b.n	80038c6 <__swsetup_r+0x1e>
 80038f8:	0751      	lsls	r1, r2, #29
 80038fa:	d512      	bpl.n	8003922 <__swsetup_r+0x7a>
 80038fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038fe:	b141      	cbz	r1, 8003912 <__swsetup_r+0x6a>
 8003900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003904:	4299      	cmp	r1, r3
 8003906:	d002      	beq.n	800390e <__swsetup_r+0x66>
 8003908:	4630      	mov	r0, r6
 800390a:	f000 fa19 	bl	8003d40 <_free_r>
 800390e:	2300      	movs	r3, #0
 8003910:	6363      	str	r3, [r4, #52]	; 0x34
 8003912:	89a3      	ldrh	r3, [r4, #12]
 8003914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	2300      	movs	r3, #0
 800391c:	6063      	str	r3, [r4, #4]
 800391e:	6923      	ldr	r3, [r4, #16]
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	b94b      	cbnz	r3, 8003942 <__swsetup_r+0x9a>
 800392e:	89a3      	ldrh	r3, [r4, #12]
 8003930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003938:	d003      	beq.n	8003942 <__swsetup_r+0x9a>
 800393a:	4621      	mov	r1, r4
 800393c:	4630      	mov	r0, r6
 800393e:	f000 f9bf 	bl	8003cc0 <__smakebuf_r>
 8003942:	89a2      	ldrh	r2, [r4, #12]
 8003944:	f012 0301 	ands.w	r3, r2, #1
 8003948:	d00c      	beq.n	8003964 <__swsetup_r+0xbc>
 800394a:	2300      	movs	r3, #0
 800394c:	60a3      	str	r3, [r4, #8]
 800394e:	6963      	ldr	r3, [r4, #20]
 8003950:	425b      	negs	r3, r3
 8003952:	61a3      	str	r3, [r4, #24]
 8003954:	6923      	ldr	r3, [r4, #16]
 8003956:	b953      	cbnz	r3, 800396e <__swsetup_r+0xc6>
 8003958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800395c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003960:	d1ba      	bne.n	80038d8 <__swsetup_r+0x30>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	0792      	lsls	r2, r2, #30
 8003966:	bf58      	it	pl
 8003968:	6963      	ldrpl	r3, [r4, #20]
 800396a:	60a3      	str	r3, [r4, #8]
 800396c:	e7f2      	b.n	8003954 <__swsetup_r+0xac>
 800396e:	2000      	movs	r0, #0
 8003970:	e7f7      	b.n	8003962 <__swsetup_r+0xba>
 8003972:	bf00      	nop
 8003974:	20000014 	.word	0x20000014
 8003978:	08004b30 	.word	0x08004b30
 800397c:	08004b50 	.word	0x08004b50
 8003980:	08004b10 	.word	0x08004b10

08003984 <__sflush_r>:
 8003984:	898a      	ldrh	r2, [r1, #12]
 8003986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800398a:	4605      	mov	r5, r0
 800398c:	0710      	lsls	r0, r2, #28
 800398e:	460c      	mov	r4, r1
 8003990:	d458      	bmi.n	8003a44 <__sflush_r+0xc0>
 8003992:	684b      	ldr	r3, [r1, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	dc05      	bgt.n	80039a4 <__sflush_r+0x20>
 8003998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	dc02      	bgt.n	80039a4 <__sflush_r+0x20>
 800399e:	2000      	movs	r0, #0
 80039a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	d0f9      	beq.n	800399e <__sflush_r+0x1a>
 80039aa:	2300      	movs	r3, #0
 80039ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80039b0:	682f      	ldr	r7, [r5, #0]
 80039b2:	6a21      	ldr	r1, [r4, #32]
 80039b4:	602b      	str	r3, [r5, #0]
 80039b6:	d032      	beq.n	8003a1e <__sflush_r+0x9a>
 80039b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	075a      	lsls	r2, r3, #29
 80039be:	d505      	bpl.n	80039cc <__sflush_r+0x48>
 80039c0:	6863      	ldr	r3, [r4, #4]
 80039c2:	1ac0      	subs	r0, r0, r3
 80039c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80039c6:	b10b      	cbz	r3, 80039cc <__sflush_r+0x48>
 80039c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ca:	1ac0      	subs	r0, r0, r3
 80039cc:	2300      	movs	r3, #0
 80039ce:	4602      	mov	r2, r0
 80039d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80039d2:	6a21      	ldr	r1, [r4, #32]
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b0      	blx	r6
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	89a3      	ldrh	r3, [r4, #12]
 80039dc:	d106      	bne.n	80039ec <__sflush_r+0x68>
 80039de:	6829      	ldr	r1, [r5, #0]
 80039e0:	291d      	cmp	r1, #29
 80039e2:	d848      	bhi.n	8003a76 <__sflush_r+0xf2>
 80039e4:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <__sflush_r+0x108>)
 80039e6:	40ca      	lsrs	r2, r1
 80039e8:	07d6      	lsls	r6, r2, #31
 80039ea:	d544      	bpl.n	8003a76 <__sflush_r+0xf2>
 80039ec:	2200      	movs	r2, #0
 80039ee:	6062      	str	r2, [r4, #4]
 80039f0:	04d9      	lsls	r1, r3, #19
 80039f2:	6922      	ldr	r2, [r4, #16]
 80039f4:	6022      	str	r2, [r4, #0]
 80039f6:	d504      	bpl.n	8003a02 <__sflush_r+0x7e>
 80039f8:	1c42      	adds	r2, r0, #1
 80039fa:	d101      	bne.n	8003a00 <__sflush_r+0x7c>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	b903      	cbnz	r3, 8003a02 <__sflush_r+0x7e>
 8003a00:	6560      	str	r0, [r4, #84]	; 0x54
 8003a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a04:	602f      	str	r7, [r5, #0]
 8003a06:	2900      	cmp	r1, #0
 8003a08:	d0c9      	beq.n	800399e <__sflush_r+0x1a>
 8003a0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a0e:	4299      	cmp	r1, r3
 8003a10:	d002      	beq.n	8003a18 <__sflush_r+0x94>
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 f994 	bl	8003d40 <_free_r>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	6360      	str	r0, [r4, #52]	; 0x34
 8003a1c:	e7c0      	b.n	80039a0 <__sflush_r+0x1c>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4628      	mov	r0, r5
 8003a22:	47b0      	blx	r6
 8003a24:	1c41      	adds	r1, r0, #1
 8003a26:	d1c8      	bne.n	80039ba <__sflush_r+0x36>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0c5      	beq.n	80039ba <__sflush_r+0x36>
 8003a2e:	2b1d      	cmp	r3, #29
 8003a30:	d001      	beq.n	8003a36 <__sflush_r+0xb2>
 8003a32:	2b16      	cmp	r3, #22
 8003a34:	d101      	bne.n	8003a3a <__sflush_r+0xb6>
 8003a36:	602f      	str	r7, [r5, #0]
 8003a38:	e7b1      	b.n	800399e <__sflush_r+0x1a>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a40:	81a3      	strh	r3, [r4, #12]
 8003a42:	e7ad      	b.n	80039a0 <__sflush_r+0x1c>
 8003a44:	690f      	ldr	r7, [r1, #16]
 8003a46:	2f00      	cmp	r7, #0
 8003a48:	d0a9      	beq.n	800399e <__sflush_r+0x1a>
 8003a4a:	0793      	lsls	r3, r2, #30
 8003a4c:	680e      	ldr	r6, [r1, #0]
 8003a4e:	bf08      	it	eq
 8003a50:	694b      	ldreq	r3, [r1, #20]
 8003a52:	600f      	str	r7, [r1, #0]
 8003a54:	bf18      	it	ne
 8003a56:	2300      	movne	r3, #0
 8003a58:	eba6 0807 	sub.w	r8, r6, r7
 8003a5c:	608b      	str	r3, [r1, #8]
 8003a5e:	f1b8 0f00 	cmp.w	r8, #0
 8003a62:	dd9c      	ble.n	800399e <__sflush_r+0x1a>
 8003a64:	4643      	mov	r3, r8
 8003a66:	463a      	mov	r2, r7
 8003a68:	6a21      	ldr	r1, [r4, #32]
 8003a6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b0      	blx	r6
 8003a70:	2800      	cmp	r0, #0
 8003a72:	dc06      	bgt.n	8003a82 <__sflush_r+0xfe>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e78e      	b.n	80039a0 <__sflush_r+0x1c>
 8003a82:	4407      	add	r7, r0
 8003a84:	eba8 0800 	sub.w	r8, r8, r0
 8003a88:	e7e9      	b.n	8003a5e <__sflush_r+0xda>
 8003a8a:	bf00      	nop
 8003a8c:	20400001 	.word	0x20400001

08003a90 <_fflush_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	690b      	ldr	r3, [r1, #16]
 8003a94:	4605      	mov	r5, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	b1db      	cbz	r3, 8003ad2 <_fflush_r+0x42>
 8003a9a:	b118      	cbz	r0, 8003aa4 <_fflush_r+0x14>
 8003a9c:	6983      	ldr	r3, [r0, #24]
 8003a9e:	b90b      	cbnz	r3, 8003aa4 <_fflush_r+0x14>
 8003aa0:	f000 f860 	bl	8003b64 <__sinit>
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <_fflush_r+0x48>)
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d109      	bne.n	8003abe <_fflush_r+0x2e>
 8003aaa:	686c      	ldr	r4, [r5, #4]
 8003aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab0:	b17b      	cbz	r3, 8003ad2 <_fflush_r+0x42>
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aba:	f7ff bf63 	b.w	8003984 <__sflush_r>
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <_fflush_r+0x4c>)
 8003ac0:	429c      	cmp	r4, r3
 8003ac2:	d101      	bne.n	8003ac8 <_fflush_r+0x38>
 8003ac4:	68ac      	ldr	r4, [r5, #8]
 8003ac6:	e7f1      	b.n	8003aac <_fflush_r+0x1c>
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <_fflush_r+0x50>)
 8003aca:	429c      	cmp	r4, r3
 8003acc:	bf08      	it	eq
 8003ace:	68ec      	ldreq	r4, [r5, #12]
 8003ad0:	e7ec      	b.n	8003aac <_fflush_r+0x1c>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
 8003ad6:	bf00      	nop
 8003ad8:	08004b30 	.word	0x08004b30
 8003adc:	08004b50 	.word	0x08004b50
 8003ae0:	08004b10 	.word	0x08004b10

08003ae4 <std>:
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	4604      	mov	r4, r0
 8003aea:	e9c0 3300 	strd	r3, r3, [r0]
 8003aee:	6083      	str	r3, [r0, #8]
 8003af0:	8181      	strh	r1, [r0, #12]
 8003af2:	6643      	str	r3, [r0, #100]	; 0x64
 8003af4:	81c2      	strh	r2, [r0, #14]
 8003af6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003afa:	6183      	str	r3, [r0, #24]
 8003afc:	4619      	mov	r1, r3
 8003afe:	2208      	movs	r2, #8
 8003b00:	305c      	adds	r0, #92	; 0x5c
 8003b02:	f7ff fdc7 	bl	8003694 <memset>
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <std+0x38>)
 8003b08:	6263      	str	r3, [r4, #36]	; 0x24
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <std+0x3c>)
 8003b0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <std+0x40>)
 8003b10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <std+0x44>)
 8003b14:	6224      	str	r4, [r4, #32]
 8003b16:	6323      	str	r3, [r4, #48]	; 0x30
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	bf00      	nop
 8003b1c:	08004751 	.word	0x08004751
 8003b20:	08004773 	.word	0x08004773
 8003b24:	080047ab 	.word	0x080047ab
 8003b28:	080047cf 	.word	0x080047cf

08003b2c <_cleanup_r>:
 8003b2c:	4901      	ldr	r1, [pc, #4]	; (8003b34 <_cleanup_r+0x8>)
 8003b2e:	f000 b885 	b.w	8003c3c <_fwalk_reent>
 8003b32:	bf00      	nop
 8003b34:	08003a91 	.word	0x08003a91

08003b38 <__sfmoreglue>:
 8003b38:	b570      	push	{r4, r5, r6, lr}
 8003b3a:	1e4a      	subs	r2, r1, #1
 8003b3c:	2568      	movs	r5, #104	; 0x68
 8003b3e:	4355      	muls	r5, r2
 8003b40:	460e      	mov	r6, r1
 8003b42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b46:	f000 f949 	bl	8003ddc <_malloc_r>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	b140      	cbz	r0, 8003b60 <__sfmoreglue+0x28>
 8003b4e:	2100      	movs	r1, #0
 8003b50:	e9c0 1600 	strd	r1, r6, [r0]
 8003b54:	300c      	adds	r0, #12
 8003b56:	60a0      	str	r0, [r4, #8]
 8003b58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b5c:	f7ff fd9a 	bl	8003694 <memset>
 8003b60:	4620      	mov	r0, r4
 8003b62:	bd70      	pop	{r4, r5, r6, pc}

08003b64 <__sinit>:
 8003b64:	6983      	ldr	r3, [r0, #24]
 8003b66:	b510      	push	{r4, lr}
 8003b68:	4604      	mov	r4, r0
 8003b6a:	bb33      	cbnz	r3, 8003bba <__sinit+0x56>
 8003b6c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b70:	6503      	str	r3, [r0, #80]	; 0x50
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <__sinit+0x58>)
 8003b74:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <__sinit+0x5c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6282      	str	r2, [r0, #40]	; 0x28
 8003b7a:	4298      	cmp	r0, r3
 8003b7c:	bf04      	itt	eq
 8003b7e:	2301      	moveq	r3, #1
 8003b80:	6183      	streq	r3, [r0, #24]
 8003b82:	f000 f81f 	bl	8003bc4 <__sfp>
 8003b86:	6060      	str	r0, [r4, #4]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 f81b 	bl	8003bc4 <__sfp>
 8003b8e:	60a0      	str	r0, [r4, #8]
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 f817 	bl	8003bc4 <__sfp>
 8003b96:	2200      	movs	r2, #0
 8003b98:	60e0      	str	r0, [r4, #12]
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	6860      	ldr	r0, [r4, #4]
 8003b9e:	f7ff ffa1 	bl	8003ae4 <std>
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	2109      	movs	r1, #9
 8003ba6:	68a0      	ldr	r0, [r4, #8]
 8003ba8:	f7ff ff9c 	bl	8003ae4 <std>
 8003bac:	2202      	movs	r2, #2
 8003bae:	2112      	movs	r1, #18
 8003bb0:	68e0      	ldr	r0, [r4, #12]
 8003bb2:	f7ff ff97 	bl	8003ae4 <std>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61a3      	str	r3, [r4, #24]
 8003bba:	bd10      	pop	{r4, pc}
 8003bbc:	08004b0c 	.word	0x08004b0c
 8003bc0:	08003b2d 	.word	0x08003b2d

08003bc4 <__sfp>:
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <__sfp+0x70>)
 8003bc8:	681e      	ldr	r6, [r3, #0]
 8003bca:	69b3      	ldr	r3, [r6, #24]
 8003bcc:	4607      	mov	r7, r0
 8003bce:	b913      	cbnz	r3, 8003bd6 <__sfp+0x12>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f7ff ffc7 	bl	8003b64 <__sinit>
 8003bd6:	3648      	adds	r6, #72	; 0x48
 8003bd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	d503      	bpl.n	8003be8 <__sfp+0x24>
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	b133      	cbz	r3, 8003bf2 <__sfp+0x2e>
 8003be4:	6836      	ldr	r6, [r6, #0]
 8003be6:	e7f7      	b.n	8003bd8 <__sfp+0x14>
 8003be8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bec:	b16d      	cbz	r5, 8003c0a <__sfp+0x46>
 8003bee:	3468      	adds	r4, #104	; 0x68
 8003bf0:	e7f4      	b.n	8003bdc <__sfp+0x18>
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	f7ff ff9f 	bl	8003b38 <__sfmoreglue>
 8003bfa:	6030      	str	r0, [r6, #0]
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	d1f1      	bne.n	8003be4 <__sfp+0x20>
 8003c00:	230c      	movs	r3, #12
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	4604      	mov	r4, r0
 8003c06:	4620      	mov	r0, r4
 8003c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <__sfp+0x74>)
 8003c0c:	6665      	str	r5, [r4, #100]	; 0x64
 8003c0e:	e9c4 5500 	strd	r5, r5, [r4]
 8003c12:	60a5      	str	r5, [r4, #8]
 8003c14:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c18:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c24:	f7ff fd36 	bl	8003694 <memset>
 8003c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c30:	e7e9      	b.n	8003c06 <__sfp+0x42>
 8003c32:	bf00      	nop
 8003c34:	08004b0c 	.word	0x08004b0c
 8003c38:	ffff0001 	.word	0xffff0001

08003c3c <_fwalk_reent>:
 8003c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c40:	4680      	mov	r8, r0
 8003c42:	4689      	mov	r9, r1
 8003c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c48:	2600      	movs	r6, #0
 8003c4a:	b914      	cbnz	r4, 8003c52 <_fwalk_reent+0x16>
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c52:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c56:	3f01      	subs	r7, #1
 8003c58:	d501      	bpl.n	8003c5e <_fwalk_reent+0x22>
 8003c5a:	6824      	ldr	r4, [r4, #0]
 8003c5c:	e7f5      	b.n	8003c4a <_fwalk_reent+0xe>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d907      	bls.n	8003c74 <_fwalk_reent+0x38>
 8003c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	d003      	beq.n	8003c74 <_fwalk_reent+0x38>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4640      	mov	r0, r8
 8003c70:	47c8      	blx	r9
 8003c72:	4306      	orrs	r6, r0
 8003c74:	3568      	adds	r5, #104	; 0x68
 8003c76:	e7ee      	b.n	8003c56 <_fwalk_reent+0x1a>

08003c78 <__swhatbuf_r>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c80:	2900      	cmp	r1, #0
 8003c82:	b096      	sub	sp, #88	; 0x58
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	da07      	bge.n	8003c9a <__swhatbuf_r+0x22>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	602b      	str	r3, [r5, #0]
 8003c8e:	89b3      	ldrh	r3, [r6, #12]
 8003c90:	061a      	lsls	r2, r3, #24
 8003c92:	d410      	bmi.n	8003cb6 <__swhatbuf_r+0x3e>
 8003c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c98:	e00e      	b.n	8003cb8 <__swhatbuf_r+0x40>
 8003c9a:	466a      	mov	r2, sp
 8003c9c:	f000 fdbe 	bl	800481c <_fstat_r>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	dbf2      	blt.n	8003c8a <__swhatbuf_r+0x12>
 8003ca4:	9a01      	ldr	r2, [sp, #4]
 8003ca6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003caa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003cae:	425a      	negs	r2, r3
 8003cb0:	415a      	adcs	r2, r3
 8003cb2:	602a      	str	r2, [r5, #0]
 8003cb4:	e7ee      	b.n	8003c94 <__swhatbuf_r+0x1c>
 8003cb6:	2340      	movs	r3, #64	; 0x40
 8003cb8:	2000      	movs	r0, #0
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	b016      	add	sp, #88	; 0x58
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}

08003cc0 <__smakebuf_r>:
 8003cc0:	898b      	ldrh	r3, [r1, #12]
 8003cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cc4:	079d      	lsls	r5, r3, #30
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	d507      	bpl.n	8003cdc <__smakebuf_r+0x1c>
 8003ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cd0:	6023      	str	r3, [r4, #0]
 8003cd2:	6123      	str	r3, [r4, #16]
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	6163      	str	r3, [r4, #20]
 8003cd8:	b002      	add	sp, #8
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	ab01      	add	r3, sp, #4
 8003cde:	466a      	mov	r2, sp
 8003ce0:	f7ff ffca 	bl	8003c78 <__swhatbuf_r>
 8003ce4:	9900      	ldr	r1, [sp, #0]
 8003ce6:	4605      	mov	r5, r0
 8003ce8:	4630      	mov	r0, r6
 8003cea:	f000 f877 	bl	8003ddc <_malloc_r>
 8003cee:	b948      	cbnz	r0, 8003d04 <__smakebuf_r+0x44>
 8003cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf4:	059a      	lsls	r2, r3, #22
 8003cf6:	d4ef      	bmi.n	8003cd8 <__smakebuf_r+0x18>
 8003cf8:	f023 0303 	bic.w	r3, r3, #3
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	81a3      	strh	r3, [r4, #12]
 8003d02:	e7e3      	b.n	8003ccc <__smakebuf_r+0xc>
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <__smakebuf_r+0x7c>)
 8003d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8003d08:	89a3      	ldrh	r3, [r4, #12]
 8003d0a:	6020      	str	r0, [r4, #0]
 8003d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	9b00      	ldr	r3, [sp, #0]
 8003d14:	6163      	str	r3, [r4, #20]
 8003d16:	9b01      	ldr	r3, [sp, #4]
 8003d18:	6120      	str	r0, [r4, #16]
 8003d1a:	b15b      	cbz	r3, 8003d34 <__smakebuf_r+0x74>
 8003d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 fd8d 	bl	8004840 <_isatty_r>
 8003d26:	b128      	cbz	r0, 8003d34 <__smakebuf_r+0x74>
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	81a3      	strh	r3, [r4, #12]
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	431d      	orrs	r5, r3
 8003d38:	81a5      	strh	r5, [r4, #12]
 8003d3a:	e7cd      	b.n	8003cd8 <__smakebuf_r+0x18>
 8003d3c:	08003b2d 	.word	0x08003b2d

08003d40 <_free_r>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	4605      	mov	r5, r0
 8003d44:	2900      	cmp	r1, #0
 8003d46:	d045      	beq.n	8003dd4 <_free_r+0x94>
 8003d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d4c:	1f0c      	subs	r4, r1, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfb8      	it	lt
 8003d52:	18e4      	addlt	r4, r4, r3
 8003d54:	f000 fdba 	bl	80048cc <__malloc_lock>
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <_free_r+0x98>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	b933      	cbnz	r3, 8003d6e <_free_r+0x2e>
 8003d60:	6063      	str	r3, [r4, #4]
 8003d62:	6014      	str	r4, [r2, #0]
 8003d64:	4628      	mov	r0, r5
 8003d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d6a:	f000 bdb0 	b.w	80048ce <__malloc_unlock>
 8003d6e:	42a3      	cmp	r3, r4
 8003d70:	d90c      	bls.n	8003d8c <_free_r+0x4c>
 8003d72:	6821      	ldr	r1, [r4, #0]
 8003d74:	1862      	adds	r2, r4, r1
 8003d76:	4293      	cmp	r3, r2
 8003d78:	bf04      	itt	eq
 8003d7a:	681a      	ldreq	r2, [r3, #0]
 8003d7c:	685b      	ldreq	r3, [r3, #4]
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	bf04      	itt	eq
 8003d82:	1852      	addeq	r2, r2, r1
 8003d84:	6022      	streq	r2, [r4, #0]
 8003d86:	6004      	str	r4, [r0, #0]
 8003d88:	e7ec      	b.n	8003d64 <_free_r+0x24>
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	b10a      	cbz	r2, 8003d94 <_free_r+0x54>
 8003d90:	42a2      	cmp	r2, r4
 8003d92:	d9fa      	bls.n	8003d8a <_free_r+0x4a>
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	1858      	adds	r0, r3, r1
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d10b      	bne.n	8003db4 <_free_r+0x74>
 8003d9c:	6820      	ldr	r0, [r4, #0]
 8003d9e:	4401      	add	r1, r0
 8003da0:	1858      	adds	r0, r3, r1
 8003da2:	4282      	cmp	r2, r0
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	d1dd      	bne.n	8003d64 <_free_r+0x24>
 8003da8:	6810      	ldr	r0, [r2, #0]
 8003daa:	6852      	ldr	r2, [r2, #4]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	4401      	add	r1, r0
 8003db0:	6019      	str	r1, [r3, #0]
 8003db2:	e7d7      	b.n	8003d64 <_free_r+0x24>
 8003db4:	d902      	bls.n	8003dbc <_free_r+0x7c>
 8003db6:	230c      	movs	r3, #12
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	e7d3      	b.n	8003d64 <_free_r+0x24>
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	1821      	adds	r1, r4, r0
 8003dc0:	428a      	cmp	r2, r1
 8003dc2:	bf04      	itt	eq
 8003dc4:	6811      	ldreq	r1, [r2, #0]
 8003dc6:	6852      	ldreq	r2, [r2, #4]
 8003dc8:	6062      	str	r2, [r4, #4]
 8003dca:	bf04      	itt	eq
 8003dcc:	1809      	addeq	r1, r1, r0
 8003dce:	6021      	streq	r1, [r4, #0]
 8003dd0:	605c      	str	r4, [r3, #4]
 8003dd2:	e7c7      	b.n	8003d64 <_free_r+0x24>
 8003dd4:	bd38      	pop	{r3, r4, r5, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200000f0 	.word	0x200000f0

08003ddc <_malloc_r>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	1ccd      	adds	r5, r1, #3
 8003de0:	f025 0503 	bic.w	r5, r5, #3
 8003de4:	3508      	adds	r5, #8
 8003de6:	2d0c      	cmp	r5, #12
 8003de8:	bf38      	it	cc
 8003dea:	250c      	movcc	r5, #12
 8003dec:	2d00      	cmp	r5, #0
 8003dee:	4606      	mov	r6, r0
 8003df0:	db01      	blt.n	8003df6 <_malloc_r+0x1a>
 8003df2:	42a9      	cmp	r1, r5
 8003df4:	d903      	bls.n	8003dfe <_malloc_r+0x22>
 8003df6:	230c      	movs	r3, #12
 8003df8:	6033      	str	r3, [r6, #0]
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	f000 fd65 	bl	80048cc <__malloc_lock>
 8003e02:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <_malloc_r+0xac>)
 8003e04:	6814      	ldr	r4, [r2, #0]
 8003e06:	4621      	mov	r1, r4
 8003e08:	b991      	cbnz	r1, 8003e30 <_malloc_r+0x54>
 8003e0a:	4c20      	ldr	r4, [pc, #128]	; (8003e8c <_malloc_r+0xb0>)
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	b91b      	cbnz	r3, 8003e18 <_malloc_r+0x3c>
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 fc8d 	bl	8004730 <_sbrk_r>
 8003e16:	6020      	str	r0, [r4, #0]
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 fc88 	bl	8004730 <_sbrk_r>
 8003e20:	1c43      	adds	r3, r0, #1
 8003e22:	d124      	bne.n	8003e6e <_malloc_r+0x92>
 8003e24:	230c      	movs	r3, #12
 8003e26:	6033      	str	r3, [r6, #0]
 8003e28:	4630      	mov	r0, r6
 8003e2a:	f000 fd50 	bl	80048ce <__malloc_unlock>
 8003e2e:	e7e4      	b.n	8003dfa <_malloc_r+0x1e>
 8003e30:	680b      	ldr	r3, [r1, #0]
 8003e32:	1b5b      	subs	r3, r3, r5
 8003e34:	d418      	bmi.n	8003e68 <_malloc_r+0x8c>
 8003e36:	2b0b      	cmp	r3, #11
 8003e38:	d90f      	bls.n	8003e5a <_malloc_r+0x7e>
 8003e3a:	600b      	str	r3, [r1, #0]
 8003e3c:	50cd      	str	r5, [r1, r3]
 8003e3e:	18cc      	adds	r4, r1, r3
 8003e40:	4630      	mov	r0, r6
 8003e42:	f000 fd44 	bl	80048ce <__malloc_unlock>
 8003e46:	f104 000b 	add.w	r0, r4, #11
 8003e4a:	1d23      	adds	r3, r4, #4
 8003e4c:	f020 0007 	bic.w	r0, r0, #7
 8003e50:	1ac3      	subs	r3, r0, r3
 8003e52:	d0d3      	beq.n	8003dfc <_malloc_r+0x20>
 8003e54:	425a      	negs	r2, r3
 8003e56:	50e2      	str	r2, [r4, r3]
 8003e58:	e7d0      	b.n	8003dfc <_malloc_r+0x20>
 8003e5a:	428c      	cmp	r4, r1
 8003e5c:	684b      	ldr	r3, [r1, #4]
 8003e5e:	bf16      	itet	ne
 8003e60:	6063      	strne	r3, [r4, #4]
 8003e62:	6013      	streq	r3, [r2, #0]
 8003e64:	460c      	movne	r4, r1
 8003e66:	e7eb      	b.n	8003e40 <_malloc_r+0x64>
 8003e68:	460c      	mov	r4, r1
 8003e6a:	6849      	ldr	r1, [r1, #4]
 8003e6c:	e7cc      	b.n	8003e08 <_malloc_r+0x2c>
 8003e6e:	1cc4      	adds	r4, r0, #3
 8003e70:	f024 0403 	bic.w	r4, r4, #3
 8003e74:	42a0      	cmp	r0, r4
 8003e76:	d005      	beq.n	8003e84 <_malloc_r+0xa8>
 8003e78:	1a21      	subs	r1, r4, r0
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	f000 fc58 	bl	8004730 <_sbrk_r>
 8003e80:	3001      	adds	r0, #1
 8003e82:	d0cf      	beq.n	8003e24 <_malloc_r+0x48>
 8003e84:	6025      	str	r5, [r4, #0]
 8003e86:	e7db      	b.n	8003e40 <_malloc_r+0x64>
 8003e88:	200000f0 	.word	0x200000f0
 8003e8c:	200000f4 	.word	0x200000f4

08003e90 <__ssputs_r>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	688e      	ldr	r6, [r1, #8]
 8003e96:	429e      	cmp	r6, r3
 8003e98:	4682      	mov	sl, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4690      	mov	r8, r2
 8003e9e:	4699      	mov	r9, r3
 8003ea0:	d837      	bhi.n	8003f12 <__ssputs_r+0x82>
 8003ea2:	898a      	ldrh	r2, [r1, #12]
 8003ea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ea8:	d031      	beq.n	8003f0e <__ssputs_r+0x7e>
 8003eaa:	6825      	ldr	r5, [r4, #0]
 8003eac:	6909      	ldr	r1, [r1, #16]
 8003eae:	1a6f      	subs	r7, r5, r1
 8003eb0:	6965      	ldr	r5, [r4, #20]
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8003ebc:	f109 0301 	add.w	r3, r9, #1
 8003ec0:	443b      	add	r3, r7
 8003ec2:	429d      	cmp	r5, r3
 8003ec4:	bf38      	it	cc
 8003ec6:	461d      	movcc	r5, r3
 8003ec8:	0553      	lsls	r3, r2, #21
 8003eca:	d530      	bpl.n	8003f2e <__ssputs_r+0x9e>
 8003ecc:	4629      	mov	r1, r5
 8003ece:	f7ff ff85 	bl	8003ddc <_malloc_r>
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	b950      	cbnz	r0, 8003eec <__ssputs_r+0x5c>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	f8ca 3000 	str.w	r3, [sl]
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eec:	463a      	mov	r2, r7
 8003eee:	6921      	ldr	r1, [r4, #16]
 8003ef0:	f000 fcc8 	bl	8004884 <memcpy>
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003efe:	81a3      	strh	r3, [r4, #12]
 8003f00:	6126      	str	r6, [r4, #16]
 8003f02:	6165      	str	r5, [r4, #20]
 8003f04:	443e      	add	r6, r7
 8003f06:	1bed      	subs	r5, r5, r7
 8003f08:	6026      	str	r6, [r4, #0]
 8003f0a:	60a5      	str	r5, [r4, #8]
 8003f0c:	464e      	mov	r6, r9
 8003f0e:	454e      	cmp	r6, r9
 8003f10:	d900      	bls.n	8003f14 <__ssputs_r+0x84>
 8003f12:	464e      	mov	r6, r9
 8003f14:	4632      	mov	r2, r6
 8003f16:	4641      	mov	r1, r8
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	f000 fcbe 	bl	800489a <memmove>
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	1b9b      	subs	r3, r3, r6
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	441e      	add	r6, r3
 8003f28:	6026      	str	r6, [r4, #0]
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e7dc      	b.n	8003ee8 <__ssputs_r+0x58>
 8003f2e:	462a      	mov	r2, r5
 8003f30:	f000 fcce 	bl	80048d0 <_realloc_r>
 8003f34:	4606      	mov	r6, r0
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d1e2      	bne.n	8003f00 <__ssputs_r+0x70>
 8003f3a:	6921      	ldr	r1, [r4, #16]
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	f7ff feff 	bl	8003d40 <_free_r>
 8003f42:	e7c8      	b.n	8003ed6 <__ssputs_r+0x46>

08003f44 <_svfiprintf_r>:
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	461d      	mov	r5, r3
 8003f4a:	898b      	ldrh	r3, [r1, #12]
 8003f4c:	061f      	lsls	r7, r3, #24
 8003f4e:	b09d      	sub	sp, #116	; 0x74
 8003f50:	4680      	mov	r8, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4616      	mov	r6, r2
 8003f56:	d50f      	bpl.n	8003f78 <_svfiprintf_r+0x34>
 8003f58:	690b      	ldr	r3, [r1, #16]
 8003f5a:	b96b      	cbnz	r3, 8003f78 <_svfiprintf_r+0x34>
 8003f5c:	2140      	movs	r1, #64	; 0x40
 8003f5e:	f7ff ff3d 	bl	8003ddc <_malloc_r>
 8003f62:	6020      	str	r0, [r4, #0]
 8003f64:	6120      	str	r0, [r4, #16]
 8003f66:	b928      	cbnz	r0, 8003f74 <_svfiprintf_r+0x30>
 8003f68:	230c      	movs	r3, #12
 8003f6a:	f8c8 3000 	str.w	r3, [r8]
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f72:	e0c8      	b.n	8004106 <_svfiprintf_r+0x1c2>
 8003f74:	2340      	movs	r3, #64	; 0x40
 8003f76:	6163      	str	r3, [r4, #20]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f82:	2330      	movs	r3, #48	; 0x30
 8003f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f88:	9503      	str	r5, [sp, #12]
 8003f8a:	f04f 0b01 	mov.w	fp, #1
 8003f8e:	4637      	mov	r7, r6
 8003f90:	463d      	mov	r5, r7
 8003f92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f96:	b10b      	cbz	r3, 8003f9c <_svfiprintf_r+0x58>
 8003f98:	2b25      	cmp	r3, #37	; 0x25
 8003f9a:	d13e      	bne.n	800401a <_svfiprintf_r+0xd6>
 8003f9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003fa0:	d00b      	beq.n	8003fba <_svfiprintf_r+0x76>
 8003fa2:	4653      	mov	r3, sl
 8003fa4:	4632      	mov	r2, r6
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	4640      	mov	r0, r8
 8003faa:	f7ff ff71 	bl	8003e90 <__ssputs_r>
 8003fae:	3001      	adds	r0, #1
 8003fb0:	f000 80a4 	beq.w	80040fc <_svfiprintf_r+0x1b8>
 8003fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb6:	4453      	add	r3, sl
 8003fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fba:	783b      	ldrb	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 809d 	beq.w	80040fc <_svfiprintf_r+0x1b8>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	9307      	str	r3, [sp, #28]
 8003fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fd6:	462f      	mov	r7, r5
 8003fd8:	2205      	movs	r2, #5
 8003fda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003fde:	4850      	ldr	r0, [pc, #320]	; (8004120 <_svfiprintf_r+0x1dc>)
 8003fe0:	f7fc f906 	bl	80001f0 <memchr>
 8003fe4:	9b04      	ldr	r3, [sp, #16]
 8003fe6:	b9d0      	cbnz	r0, 800401e <_svfiprintf_r+0xda>
 8003fe8:	06d9      	lsls	r1, r3, #27
 8003fea:	bf44      	itt	mi
 8003fec:	2220      	movmi	r2, #32
 8003fee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ff2:	071a      	lsls	r2, r3, #28
 8003ff4:	bf44      	itt	mi
 8003ff6:	222b      	movmi	r2, #43	; 0x2b
 8003ff8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ffc:	782a      	ldrb	r2, [r5, #0]
 8003ffe:	2a2a      	cmp	r2, #42	; 0x2a
 8004000:	d015      	beq.n	800402e <_svfiprintf_r+0xea>
 8004002:	9a07      	ldr	r2, [sp, #28]
 8004004:	462f      	mov	r7, r5
 8004006:	2000      	movs	r0, #0
 8004008:	250a      	movs	r5, #10
 800400a:	4639      	mov	r1, r7
 800400c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004010:	3b30      	subs	r3, #48	; 0x30
 8004012:	2b09      	cmp	r3, #9
 8004014:	d94d      	bls.n	80040b2 <_svfiprintf_r+0x16e>
 8004016:	b1b8      	cbz	r0, 8004048 <_svfiprintf_r+0x104>
 8004018:	e00f      	b.n	800403a <_svfiprintf_r+0xf6>
 800401a:	462f      	mov	r7, r5
 800401c:	e7b8      	b.n	8003f90 <_svfiprintf_r+0x4c>
 800401e:	4a40      	ldr	r2, [pc, #256]	; (8004120 <_svfiprintf_r+0x1dc>)
 8004020:	1a80      	subs	r0, r0, r2
 8004022:	fa0b f000 	lsl.w	r0, fp, r0
 8004026:	4318      	orrs	r0, r3
 8004028:	9004      	str	r0, [sp, #16]
 800402a:	463d      	mov	r5, r7
 800402c:	e7d3      	b.n	8003fd6 <_svfiprintf_r+0x92>
 800402e:	9a03      	ldr	r2, [sp, #12]
 8004030:	1d11      	adds	r1, r2, #4
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	9103      	str	r1, [sp, #12]
 8004036:	2a00      	cmp	r2, #0
 8004038:	db01      	blt.n	800403e <_svfiprintf_r+0xfa>
 800403a:	9207      	str	r2, [sp, #28]
 800403c:	e004      	b.n	8004048 <_svfiprintf_r+0x104>
 800403e:	4252      	negs	r2, r2
 8004040:	f043 0302 	orr.w	r3, r3, #2
 8004044:	9207      	str	r2, [sp, #28]
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	783b      	ldrb	r3, [r7, #0]
 800404a:	2b2e      	cmp	r3, #46	; 0x2e
 800404c:	d10c      	bne.n	8004068 <_svfiprintf_r+0x124>
 800404e:	787b      	ldrb	r3, [r7, #1]
 8004050:	2b2a      	cmp	r3, #42	; 0x2a
 8004052:	d133      	bne.n	80040bc <_svfiprintf_r+0x178>
 8004054:	9b03      	ldr	r3, [sp, #12]
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	9203      	str	r2, [sp, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	bfb8      	it	lt
 8004060:	f04f 33ff 	movlt.w	r3, #4294967295
 8004064:	3702      	adds	r7, #2
 8004066:	9305      	str	r3, [sp, #20]
 8004068:	4d2e      	ldr	r5, [pc, #184]	; (8004124 <_svfiprintf_r+0x1e0>)
 800406a:	7839      	ldrb	r1, [r7, #0]
 800406c:	2203      	movs	r2, #3
 800406e:	4628      	mov	r0, r5
 8004070:	f7fc f8be 	bl	80001f0 <memchr>
 8004074:	b138      	cbz	r0, 8004086 <_svfiprintf_r+0x142>
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	1b40      	subs	r0, r0, r5
 800407a:	fa03 f000 	lsl.w	r0, r3, r0
 800407e:	9b04      	ldr	r3, [sp, #16]
 8004080:	4303      	orrs	r3, r0
 8004082:	3701      	adds	r7, #1
 8004084:	9304      	str	r3, [sp, #16]
 8004086:	7839      	ldrb	r1, [r7, #0]
 8004088:	4827      	ldr	r0, [pc, #156]	; (8004128 <_svfiprintf_r+0x1e4>)
 800408a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800408e:	2206      	movs	r2, #6
 8004090:	1c7e      	adds	r6, r7, #1
 8004092:	f7fc f8ad 	bl	80001f0 <memchr>
 8004096:	2800      	cmp	r0, #0
 8004098:	d038      	beq.n	800410c <_svfiprintf_r+0x1c8>
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <_svfiprintf_r+0x1e8>)
 800409c:	bb13      	cbnz	r3, 80040e4 <_svfiprintf_r+0x1a0>
 800409e:	9b03      	ldr	r3, [sp, #12]
 80040a0:	3307      	adds	r3, #7
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	3308      	adds	r3, #8
 80040a8:	9303      	str	r3, [sp, #12]
 80040aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040ac:	444b      	add	r3, r9
 80040ae:	9309      	str	r3, [sp, #36]	; 0x24
 80040b0:	e76d      	b.n	8003f8e <_svfiprintf_r+0x4a>
 80040b2:	fb05 3202 	mla	r2, r5, r2, r3
 80040b6:	2001      	movs	r0, #1
 80040b8:	460f      	mov	r7, r1
 80040ba:	e7a6      	b.n	800400a <_svfiprintf_r+0xc6>
 80040bc:	2300      	movs	r3, #0
 80040be:	3701      	adds	r7, #1
 80040c0:	9305      	str	r3, [sp, #20]
 80040c2:	4619      	mov	r1, r3
 80040c4:	250a      	movs	r5, #10
 80040c6:	4638      	mov	r0, r7
 80040c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040cc:	3a30      	subs	r2, #48	; 0x30
 80040ce:	2a09      	cmp	r2, #9
 80040d0:	d903      	bls.n	80040da <_svfiprintf_r+0x196>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0c8      	beq.n	8004068 <_svfiprintf_r+0x124>
 80040d6:	9105      	str	r1, [sp, #20]
 80040d8:	e7c6      	b.n	8004068 <_svfiprintf_r+0x124>
 80040da:	fb05 2101 	mla	r1, r5, r1, r2
 80040de:	2301      	movs	r3, #1
 80040e0:	4607      	mov	r7, r0
 80040e2:	e7f0      	b.n	80040c6 <_svfiprintf_r+0x182>
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4622      	mov	r2, r4
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <_svfiprintf_r+0x1ec>)
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	4640      	mov	r0, r8
 80040f0:	f3af 8000 	nop.w
 80040f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040f8:	4681      	mov	r9, r0
 80040fa:	d1d6      	bne.n	80040aa <_svfiprintf_r+0x166>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	065b      	lsls	r3, r3, #25
 8004100:	f53f af35 	bmi.w	8003f6e <_svfiprintf_r+0x2a>
 8004104:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004106:	b01d      	add	sp, #116	; 0x74
 8004108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410c:	ab03      	add	r3, sp, #12
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	4622      	mov	r2, r4
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <_svfiprintf_r+0x1ec>)
 8004114:	a904      	add	r1, sp, #16
 8004116:	4640      	mov	r0, r8
 8004118:	f000 f9c2 	bl	80044a0 <_printf_i>
 800411c:	e7ea      	b.n	80040f4 <_svfiprintf_r+0x1b0>
 800411e:	bf00      	nop
 8004120:	08004b70 	.word	0x08004b70
 8004124:	08004b76 	.word	0x08004b76
 8004128:	08004b7a 	.word	0x08004b7a
 800412c:	00000000 	.word	0x00000000
 8004130:	08003e91 	.word	0x08003e91

08004134 <__sfputc_r>:
 8004134:	6893      	ldr	r3, [r2, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	b410      	push	{r4}
 800413c:	6093      	str	r3, [r2, #8]
 800413e:	da08      	bge.n	8004152 <__sfputc_r+0x1e>
 8004140:	6994      	ldr	r4, [r2, #24]
 8004142:	42a3      	cmp	r3, r4
 8004144:	db01      	blt.n	800414a <__sfputc_r+0x16>
 8004146:	290a      	cmp	r1, #10
 8004148:	d103      	bne.n	8004152 <__sfputc_r+0x1e>
 800414a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800414e:	f7ff bb59 	b.w	8003804 <__swbuf_r>
 8004152:	6813      	ldr	r3, [r2, #0]
 8004154:	1c58      	adds	r0, r3, #1
 8004156:	6010      	str	r0, [r2, #0]
 8004158:	7019      	strb	r1, [r3, #0]
 800415a:	4608      	mov	r0, r1
 800415c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004160:	4770      	bx	lr

08004162 <__sfputs_r>:
 8004162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004164:	4606      	mov	r6, r0
 8004166:	460f      	mov	r7, r1
 8004168:	4614      	mov	r4, r2
 800416a:	18d5      	adds	r5, r2, r3
 800416c:	42ac      	cmp	r4, r5
 800416e:	d101      	bne.n	8004174 <__sfputs_r+0x12>
 8004170:	2000      	movs	r0, #0
 8004172:	e007      	b.n	8004184 <__sfputs_r+0x22>
 8004174:	463a      	mov	r2, r7
 8004176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800417a:	4630      	mov	r0, r6
 800417c:	f7ff ffda 	bl	8004134 <__sfputc_r>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d1f3      	bne.n	800416c <__sfputs_r+0xa>
 8004184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004188 <_vfiprintf_r>:
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	460c      	mov	r4, r1
 800418e:	b09d      	sub	sp, #116	; 0x74
 8004190:	4617      	mov	r7, r2
 8004192:	461d      	mov	r5, r3
 8004194:	4606      	mov	r6, r0
 8004196:	b118      	cbz	r0, 80041a0 <_vfiprintf_r+0x18>
 8004198:	6983      	ldr	r3, [r0, #24]
 800419a:	b90b      	cbnz	r3, 80041a0 <_vfiprintf_r+0x18>
 800419c:	f7ff fce2 	bl	8003b64 <__sinit>
 80041a0:	4b7c      	ldr	r3, [pc, #496]	; (8004394 <_vfiprintf_r+0x20c>)
 80041a2:	429c      	cmp	r4, r3
 80041a4:	d158      	bne.n	8004258 <_vfiprintf_r+0xd0>
 80041a6:	6874      	ldr	r4, [r6, #4]
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	0718      	lsls	r0, r3, #28
 80041ac:	d55e      	bpl.n	800426c <_vfiprintf_r+0xe4>
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d05b      	beq.n	800426c <_vfiprintf_r+0xe4>
 80041b4:	2300      	movs	r3, #0
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	2320      	movs	r3, #32
 80041ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041be:	2330      	movs	r3, #48	; 0x30
 80041c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041c4:	9503      	str	r5, [sp, #12]
 80041c6:	f04f 0b01 	mov.w	fp, #1
 80041ca:	46b8      	mov	r8, r7
 80041cc:	4645      	mov	r5, r8
 80041ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041d2:	b10b      	cbz	r3, 80041d8 <_vfiprintf_r+0x50>
 80041d4:	2b25      	cmp	r3, #37	; 0x25
 80041d6:	d154      	bne.n	8004282 <_vfiprintf_r+0xfa>
 80041d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80041dc:	d00b      	beq.n	80041f6 <_vfiprintf_r+0x6e>
 80041de:	4653      	mov	r3, sl
 80041e0:	463a      	mov	r2, r7
 80041e2:	4621      	mov	r1, r4
 80041e4:	4630      	mov	r0, r6
 80041e6:	f7ff ffbc 	bl	8004162 <__sfputs_r>
 80041ea:	3001      	adds	r0, #1
 80041ec:	f000 80c2 	beq.w	8004374 <_vfiprintf_r+0x1ec>
 80041f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041f2:	4453      	add	r3, sl
 80041f4:	9309      	str	r3, [sp, #36]	; 0x24
 80041f6:	f898 3000 	ldrb.w	r3, [r8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80ba 	beq.w	8004374 <_vfiprintf_r+0x1ec>
 8004200:	2300      	movs	r3, #0
 8004202:	f04f 32ff 	mov.w	r2, #4294967295
 8004206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800420a:	9304      	str	r3, [sp, #16]
 800420c:	9307      	str	r3, [sp, #28]
 800420e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004212:	931a      	str	r3, [sp, #104]	; 0x68
 8004214:	46a8      	mov	r8, r5
 8004216:	2205      	movs	r2, #5
 8004218:	f818 1b01 	ldrb.w	r1, [r8], #1
 800421c:	485e      	ldr	r0, [pc, #376]	; (8004398 <_vfiprintf_r+0x210>)
 800421e:	f7fb ffe7 	bl	80001f0 <memchr>
 8004222:	9b04      	ldr	r3, [sp, #16]
 8004224:	bb78      	cbnz	r0, 8004286 <_vfiprintf_r+0xfe>
 8004226:	06d9      	lsls	r1, r3, #27
 8004228:	bf44      	itt	mi
 800422a:	2220      	movmi	r2, #32
 800422c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004230:	071a      	lsls	r2, r3, #28
 8004232:	bf44      	itt	mi
 8004234:	222b      	movmi	r2, #43	; 0x2b
 8004236:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800423a:	782a      	ldrb	r2, [r5, #0]
 800423c:	2a2a      	cmp	r2, #42	; 0x2a
 800423e:	d02a      	beq.n	8004296 <_vfiprintf_r+0x10e>
 8004240:	9a07      	ldr	r2, [sp, #28]
 8004242:	46a8      	mov	r8, r5
 8004244:	2000      	movs	r0, #0
 8004246:	250a      	movs	r5, #10
 8004248:	4641      	mov	r1, r8
 800424a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800424e:	3b30      	subs	r3, #48	; 0x30
 8004250:	2b09      	cmp	r3, #9
 8004252:	d969      	bls.n	8004328 <_vfiprintf_r+0x1a0>
 8004254:	b360      	cbz	r0, 80042b0 <_vfiprintf_r+0x128>
 8004256:	e024      	b.n	80042a2 <_vfiprintf_r+0x11a>
 8004258:	4b50      	ldr	r3, [pc, #320]	; (800439c <_vfiprintf_r+0x214>)
 800425a:	429c      	cmp	r4, r3
 800425c:	d101      	bne.n	8004262 <_vfiprintf_r+0xda>
 800425e:	68b4      	ldr	r4, [r6, #8]
 8004260:	e7a2      	b.n	80041a8 <_vfiprintf_r+0x20>
 8004262:	4b4f      	ldr	r3, [pc, #316]	; (80043a0 <_vfiprintf_r+0x218>)
 8004264:	429c      	cmp	r4, r3
 8004266:	bf08      	it	eq
 8004268:	68f4      	ldreq	r4, [r6, #12]
 800426a:	e79d      	b.n	80041a8 <_vfiprintf_r+0x20>
 800426c:	4621      	mov	r1, r4
 800426e:	4630      	mov	r0, r6
 8004270:	f7ff fb1a 	bl	80038a8 <__swsetup_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	d09d      	beq.n	80041b4 <_vfiprintf_r+0x2c>
 8004278:	f04f 30ff 	mov.w	r0, #4294967295
 800427c:	b01d      	add	sp, #116	; 0x74
 800427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004282:	46a8      	mov	r8, r5
 8004284:	e7a2      	b.n	80041cc <_vfiprintf_r+0x44>
 8004286:	4a44      	ldr	r2, [pc, #272]	; (8004398 <_vfiprintf_r+0x210>)
 8004288:	1a80      	subs	r0, r0, r2
 800428a:	fa0b f000 	lsl.w	r0, fp, r0
 800428e:	4318      	orrs	r0, r3
 8004290:	9004      	str	r0, [sp, #16]
 8004292:	4645      	mov	r5, r8
 8004294:	e7be      	b.n	8004214 <_vfiprintf_r+0x8c>
 8004296:	9a03      	ldr	r2, [sp, #12]
 8004298:	1d11      	adds	r1, r2, #4
 800429a:	6812      	ldr	r2, [r2, #0]
 800429c:	9103      	str	r1, [sp, #12]
 800429e:	2a00      	cmp	r2, #0
 80042a0:	db01      	blt.n	80042a6 <_vfiprintf_r+0x11e>
 80042a2:	9207      	str	r2, [sp, #28]
 80042a4:	e004      	b.n	80042b0 <_vfiprintf_r+0x128>
 80042a6:	4252      	negs	r2, r2
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	9207      	str	r2, [sp, #28]
 80042ae:	9304      	str	r3, [sp, #16]
 80042b0:	f898 3000 	ldrb.w	r3, [r8]
 80042b4:	2b2e      	cmp	r3, #46	; 0x2e
 80042b6:	d10e      	bne.n	80042d6 <_vfiprintf_r+0x14e>
 80042b8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80042bc:	2b2a      	cmp	r3, #42	; 0x2a
 80042be:	d138      	bne.n	8004332 <_vfiprintf_r+0x1aa>
 80042c0:	9b03      	ldr	r3, [sp, #12]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	9203      	str	r2, [sp, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bfb8      	it	lt
 80042cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80042d0:	f108 0802 	add.w	r8, r8, #2
 80042d4:	9305      	str	r3, [sp, #20]
 80042d6:	4d33      	ldr	r5, [pc, #204]	; (80043a4 <_vfiprintf_r+0x21c>)
 80042d8:	f898 1000 	ldrb.w	r1, [r8]
 80042dc:	2203      	movs	r2, #3
 80042de:	4628      	mov	r0, r5
 80042e0:	f7fb ff86 	bl	80001f0 <memchr>
 80042e4:	b140      	cbz	r0, 80042f8 <_vfiprintf_r+0x170>
 80042e6:	2340      	movs	r3, #64	; 0x40
 80042e8:	1b40      	subs	r0, r0, r5
 80042ea:	fa03 f000 	lsl.w	r0, r3, r0
 80042ee:	9b04      	ldr	r3, [sp, #16]
 80042f0:	4303      	orrs	r3, r0
 80042f2:	f108 0801 	add.w	r8, r8, #1
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	f898 1000 	ldrb.w	r1, [r8]
 80042fc:	482a      	ldr	r0, [pc, #168]	; (80043a8 <_vfiprintf_r+0x220>)
 80042fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004302:	2206      	movs	r2, #6
 8004304:	f108 0701 	add.w	r7, r8, #1
 8004308:	f7fb ff72 	bl	80001f0 <memchr>
 800430c:	2800      	cmp	r0, #0
 800430e:	d037      	beq.n	8004380 <_vfiprintf_r+0x1f8>
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <_vfiprintf_r+0x224>)
 8004312:	bb1b      	cbnz	r3, 800435c <_vfiprintf_r+0x1d4>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	3307      	adds	r3, #7
 8004318:	f023 0307 	bic.w	r3, r3, #7
 800431c:	3308      	adds	r3, #8
 800431e:	9303      	str	r3, [sp, #12]
 8004320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004322:	444b      	add	r3, r9
 8004324:	9309      	str	r3, [sp, #36]	; 0x24
 8004326:	e750      	b.n	80041ca <_vfiprintf_r+0x42>
 8004328:	fb05 3202 	mla	r2, r5, r2, r3
 800432c:	2001      	movs	r0, #1
 800432e:	4688      	mov	r8, r1
 8004330:	e78a      	b.n	8004248 <_vfiprintf_r+0xc0>
 8004332:	2300      	movs	r3, #0
 8004334:	f108 0801 	add.w	r8, r8, #1
 8004338:	9305      	str	r3, [sp, #20]
 800433a:	4619      	mov	r1, r3
 800433c:	250a      	movs	r5, #10
 800433e:	4640      	mov	r0, r8
 8004340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004344:	3a30      	subs	r2, #48	; 0x30
 8004346:	2a09      	cmp	r2, #9
 8004348:	d903      	bls.n	8004352 <_vfiprintf_r+0x1ca>
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0c3      	beq.n	80042d6 <_vfiprintf_r+0x14e>
 800434e:	9105      	str	r1, [sp, #20]
 8004350:	e7c1      	b.n	80042d6 <_vfiprintf_r+0x14e>
 8004352:	fb05 2101 	mla	r1, r5, r1, r2
 8004356:	2301      	movs	r3, #1
 8004358:	4680      	mov	r8, r0
 800435a:	e7f0      	b.n	800433e <_vfiprintf_r+0x1b6>
 800435c:	ab03      	add	r3, sp, #12
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	4622      	mov	r2, r4
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <_vfiprintf_r+0x228>)
 8004364:	a904      	add	r1, sp, #16
 8004366:	4630      	mov	r0, r6
 8004368:	f3af 8000 	nop.w
 800436c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004370:	4681      	mov	r9, r0
 8004372:	d1d5      	bne.n	8004320 <_vfiprintf_r+0x198>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	065b      	lsls	r3, r3, #25
 8004378:	f53f af7e 	bmi.w	8004278 <_vfiprintf_r+0xf0>
 800437c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437e:	e77d      	b.n	800427c <_vfiprintf_r+0xf4>
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4622      	mov	r2, r4
 8004386:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <_vfiprintf_r+0x228>)
 8004388:	a904      	add	r1, sp, #16
 800438a:	4630      	mov	r0, r6
 800438c:	f000 f888 	bl	80044a0 <_printf_i>
 8004390:	e7ec      	b.n	800436c <_vfiprintf_r+0x1e4>
 8004392:	bf00      	nop
 8004394:	08004b30 	.word	0x08004b30
 8004398:	08004b70 	.word	0x08004b70
 800439c:	08004b50 	.word	0x08004b50
 80043a0:	08004b10 	.word	0x08004b10
 80043a4:	08004b76 	.word	0x08004b76
 80043a8:	08004b7a 	.word	0x08004b7a
 80043ac:	00000000 	.word	0x00000000
 80043b0:	08004163 	.word	0x08004163

080043b4 <_printf_common>:
 80043b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043b8:	4691      	mov	r9, r2
 80043ba:	461f      	mov	r7, r3
 80043bc:	688a      	ldr	r2, [r1, #8]
 80043be:	690b      	ldr	r3, [r1, #16]
 80043c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bfb8      	it	lt
 80043c8:	4613      	movlt	r3, r2
 80043ca:	f8c9 3000 	str.w	r3, [r9]
 80043ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043d2:	4606      	mov	r6, r0
 80043d4:	460c      	mov	r4, r1
 80043d6:	b112      	cbz	r2, 80043de <_printf_common+0x2a>
 80043d8:	3301      	adds	r3, #1
 80043da:	f8c9 3000 	str.w	r3, [r9]
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	0699      	lsls	r1, r3, #26
 80043e2:	bf42      	ittt	mi
 80043e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043e8:	3302      	addmi	r3, #2
 80043ea:	f8c9 3000 	strmi.w	r3, [r9]
 80043ee:	6825      	ldr	r5, [r4, #0]
 80043f0:	f015 0506 	ands.w	r5, r5, #6
 80043f4:	d107      	bne.n	8004406 <_printf_common+0x52>
 80043f6:	f104 0a19 	add.w	sl, r4, #25
 80043fa:	68e3      	ldr	r3, [r4, #12]
 80043fc:	f8d9 2000 	ldr.w	r2, [r9]
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	42ab      	cmp	r3, r5
 8004404:	dc28      	bgt.n	8004458 <_printf_common+0xa4>
 8004406:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	3300      	adds	r3, #0
 800440e:	bf18      	it	ne
 8004410:	2301      	movne	r3, #1
 8004412:	0692      	lsls	r2, r2, #26
 8004414:	d42d      	bmi.n	8004472 <_printf_common+0xbe>
 8004416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441a:	4639      	mov	r1, r7
 800441c:	4630      	mov	r0, r6
 800441e:	47c0      	blx	r8
 8004420:	3001      	adds	r0, #1
 8004422:	d020      	beq.n	8004466 <_printf_common+0xb2>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	68e5      	ldr	r5, [r4, #12]
 8004428:	f8d9 2000 	ldr.w	r2, [r9]
 800442c:	f003 0306 	and.w	r3, r3, #6
 8004430:	2b04      	cmp	r3, #4
 8004432:	bf08      	it	eq
 8004434:	1aad      	subeq	r5, r5, r2
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	f04f 0900 	mov.w	r9, #0
 800444e:	341a      	adds	r4, #26
 8004450:	454d      	cmp	r5, r9
 8004452:	d11a      	bne.n	800448a <_printf_common+0xd6>
 8004454:	2000      	movs	r0, #0
 8004456:	e008      	b.n	800446a <_printf_common+0xb6>
 8004458:	2301      	movs	r3, #1
 800445a:	4652      	mov	r2, sl
 800445c:	4639      	mov	r1, r7
 800445e:	4630      	mov	r0, r6
 8004460:	47c0      	blx	r8
 8004462:	3001      	adds	r0, #1
 8004464:	d103      	bne.n	800446e <_printf_common+0xba>
 8004466:	f04f 30ff 	mov.w	r0, #4294967295
 800446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446e:	3501      	adds	r5, #1
 8004470:	e7c3      	b.n	80043fa <_printf_common+0x46>
 8004472:	18e1      	adds	r1, r4, r3
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	2030      	movs	r0, #48	; 0x30
 8004478:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447c:	4422      	add	r2, r4
 800447e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004482:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004486:	3302      	adds	r3, #2
 8004488:	e7c5      	b.n	8004416 <_printf_common+0x62>
 800448a:	2301      	movs	r3, #1
 800448c:	4622      	mov	r2, r4
 800448e:	4639      	mov	r1, r7
 8004490:	4630      	mov	r0, r6
 8004492:	47c0      	blx	r8
 8004494:	3001      	adds	r0, #1
 8004496:	d0e6      	beq.n	8004466 <_printf_common+0xb2>
 8004498:	f109 0901 	add.w	r9, r9, #1
 800449c:	e7d8      	b.n	8004450 <_printf_common+0x9c>
	...

080044a0 <_printf_i>:
 80044a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044a8:	460c      	mov	r4, r1
 80044aa:	7e09      	ldrb	r1, [r1, #24]
 80044ac:	b085      	sub	sp, #20
 80044ae:	296e      	cmp	r1, #110	; 0x6e
 80044b0:	4617      	mov	r7, r2
 80044b2:	4606      	mov	r6, r0
 80044b4:	4698      	mov	r8, r3
 80044b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044b8:	f000 80b3 	beq.w	8004622 <_printf_i+0x182>
 80044bc:	d822      	bhi.n	8004504 <_printf_i+0x64>
 80044be:	2963      	cmp	r1, #99	; 0x63
 80044c0:	d036      	beq.n	8004530 <_printf_i+0x90>
 80044c2:	d80a      	bhi.n	80044da <_printf_i+0x3a>
 80044c4:	2900      	cmp	r1, #0
 80044c6:	f000 80b9 	beq.w	800463c <_printf_i+0x19c>
 80044ca:	2958      	cmp	r1, #88	; 0x58
 80044cc:	f000 8083 	beq.w	80045d6 <_printf_i+0x136>
 80044d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044d8:	e032      	b.n	8004540 <_printf_i+0xa0>
 80044da:	2964      	cmp	r1, #100	; 0x64
 80044dc:	d001      	beq.n	80044e2 <_printf_i+0x42>
 80044de:	2969      	cmp	r1, #105	; 0x69
 80044e0:	d1f6      	bne.n	80044d0 <_printf_i+0x30>
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	0605      	lsls	r5, r0, #24
 80044e8:	f103 0104 	add.w	r1, r3, #4
 80044ec:	d52a      	bpl.n	8004544 <_printf_i+0xa4>
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6011      	str	r1, [r2, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da03      	bge.n	80044fe <_printf_i+0x5e>
 80044f6:	222d      	movs	r2, #45	; 0x2d
 80044f8:	425b      	negs	r3, r3
 80044fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044fe:	486f      	ldr	r0, [pc, #444]	; (80046bc <_printf_i+0x21c>)
 8004500:	220a      	movs	r2, #10
 8004502:	e039      	b.n	8004578 <_printf_i+0xd8>
 8004504:	2973      	cmp	r1, #115	; 0x73
 8004506:	f000 809d 	beq.w	8004644 <_printf_i+0x1a4>
 800450a:	d808      	bhi.n	800451e <_printf_i+0x7e>
 800450c:	296f      	cmp	r1, #111	; 0x6f
 800450e:	d020      	beq.n	8004552 <_printf_i+0xb2>
 8004510:	2970      	cmp	r1, #112	; 0x70
 8004512:	d1dd      	bne.n	80044d0 <_printf_i+0x30>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	f043 0320 	orr.w	r3, r3, #32
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	e003      	b.n	8004526 <_printf_i+0x86>
 800451e:	2975      	cmp	r1, #117	; 0x75
 8004520:	d017      	beq.n	8004552 <_printf_i+0xb2>
 8004522:	2978      	cmp	r1, #120	; 0x78
 8004524:	d1d4      	bne.n	80044d0 <_printf_i+0x30>
 8004526:	2378      	movs	r3, #120	; 0x78
 8004528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800452c:	4864      	ldr	r0, [pc, #400]	; (80046c0 <_printf_i+0x220>)
 800452e:	e055      	b.n	80045dc <_printf_i+0x13c>
 8004530:	6813      	ldr	r3, [r2, #0]
 8004532:	1d19      	adds	r1, r3, #4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6011      	str	r1, [r2, #0]
 8004538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800453c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004540:	2301      	movs	r3, #1
 8004542:	e08c      	b.n	800465e <_printf_i+0x1be>
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6011      	str	r1, [r2, #0]
 8004548:	f010 0f40 	tst.w	r0, #64	; 0x40
 800454c:	bf18      	it	ne
 800454e:	b21b      	sxthne	r3, r3
 8004550:	e7cf      	b.n	80044f2 <_printf_i+0x52>
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	6825      	ldr	r5, [r4, #0]
 8004556:	1d18      	adds	r0, r3, #4
 8004558:	6010      	str	r0, [r2, #0]
 800455a:	0628      	lsls	r0, r5, #24
 800455c:	d501      	bpl.n	8004562 <_printf_i+0xc2>
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	e002      	b.n	8004568 <_printf_i+0xc8>
 8004562:	0668      	lsls	r0, r5, #25
 8004564:	d5fb      	bpl.n	800455e <_printf_i+0xbe>
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	4854      	ldr	r0, [pc, #336]	; (80046bc <_printf_i+0x21c>)
 800456a:	296f      	cmp	r1, #111	; 0x6f
 800456c:	bf14      	ite	ne
 800456e:	220a      	movne	r2, #10
 8004570:	2208      	moveq	r2, #8
 8004572:	2100      	movs	r1, #0
 8004574:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004578:	6865      	ldr	r5, [r4, #4]
 800457a:	60a5      	str	r5, [r4, #8]
 800457c:	2d00      	cmp	r5, #0
 800457e:	f2c0 8095 	blt.w	80046ac <_printf_i+0x20c>
 8004582:	6821      	ldr	r1, [r4, #0]
 8004584:	f021 0104 	bic.w	r1, r1, #4
 8004588:	6021      	str	r1, [r4, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d13d      	bne.n	800460a <_printf_i+0x16a>
 800458e:	2d00      	cmp	r5, #0
 8004590:	f040 808e 	bne.w	80046b0 <_printf_i+0x210>
 8004594:	4665      	mov	r5, ip
 8004596:	2a08      	cmp	r2, #8
 8004598:	d10b      	bne.n	80045b2 <_printf_i+0x112>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	07db      	lsls	r3, r3, #31
 800459e:	d508      	bpl.n	80045b2 <_printf_i+0x112>
 80045a0:	6923      	ldr	r3, [r4, #16]
 80045a2:	6862      	ldr	r2, [r4, #4]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	bfde      	ittt	le
 80045a8:	2330      	movle	r3, #48	; 0x30
 80045aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045b2:	ebac 0305 	sub.w	r3, ip, r5
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	f8cd 8000 	str.w	r8, [sp]
 80045bc:	463b      	mov	r3, r7
 80045be:	aa03      	add	r2, sp, #12
 80045c0:	4621      	mov	r1, r4
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7ff fef6 	bl	80043b4 <_printf_common>
 80045c8:	3001      	adds	r0, #1
 80045ca:	d14d      	bne.n	8004668 <_printf_i+0x1c8>
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	b005      	add	sp, #20
 80045d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045d6:	4839      	ldr	r0, [pc, #228]	; (80046bc <_printf_i+0x21c>)
 80045d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045dc:	6813      	ldr	r3, [r2, #0]
 80045de:	6821      	ldr	r1, [r4, #0]
 80045e0:	1d1d      	adds	r5, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6015      	str	r5, [r2, #0]
 80045e6:	060a      	lsls	r2, r1, #24
 80045e8:	d50b      	bpl.n	8004602 <_printf_i+0x162>
 80045ea:	07ca      	lsls	r2, r1, #31
 80045ec:	bf44      	itt	mi
 80045ee:	f041 0120 	orrmi.w	r1, r1, #32
 80045f2:	6021      	strmi	r1, [r4, #0]
 80045f4:	b91b      	cbnz	r3, 80045fe <_printf_i+0x15e>
 80045f6:	6822      	ldr	r2, [r4, #0]
 80045f8:	f022 0220 	bic.w	r2, r2, #32
 80045fc:	6022      	str	r2, [r4, #0]
 80045fe:	2210      	movs	r2, #16
 8004600:	e7b7      	b.n	8004572 <_printf_i+0xd2>
 8004602:	064d      	lsls	r5, r1, #25
 8004604:	bf48      	it	mi
 8004606:	b29b      	uxthmi	r3, r3
 8004608:	e7ef      	b.n	80045ea <_printf_i+0x14a>
 800460a:	4665      	mov	r5, ip
 800460c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004610:	fb02 3311 	mls	r3, r2, r1, r3
 8004614:	5cc3      	ldrb	r3, [r0, r3]
 8004616:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800461a:	460b      	mov	r3, r1
 800461c:	2900      	cmp	r1, #0
 800461e:	d1f5      	bne.n	800460c <_printf_i+0x16c>
 8004620:	e7b9      	b.n	8004596 <_printf_i+0xf6>
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	6825      	ldr	r5, [r4, #0]
 8004626:	6961      	ldr	r1, [r4, #20]
 8004628:	1d18      	adds	r0, r3, #4
 800462a:	6010      	str	r0, [r2, #0]
 800462c:	0628      	lsls	r0, r5, #24
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	d501      	bpl.n	8004636 <_printf_i+0x196>
 8004632:	6019      	str	r1, [r3, #0]
 8004634:	e002      	b.n	800463c <_printf_i+0x19c>
 8004636:	066a      	lsls	r2, r5, #25
 8004638:	d5fb      	bpl.n	8004632 <_printf_i+0x192>
 800463a:	8019      	strh	r1, [r3, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	6123      	str	r3, [r4, #16]
 8004640:	4665      	mov	r5, ip
 8004642:	e7b9      	b.n	80045b8 <_printf_i+0x118>
 8004644:	6813      	ldr	r3, [r2, #0]
 8004646:	1d19      	adds	r1, r3, #4
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	681d      	ldr	r5, [r3, #0]
 800464c:	6862      	ldr	r2, [r4, #4]
 800464e:	2100      	movs	r1, #0
 8004650:	4628      	mov	r0, r5
 8004652:	f7fb fdcd 	bl	80001f0 <memchr>
 8004656:	b108      	cbz	r0, 800465c <_printf_i+0x1bc>
 8004658:	1b40      	subs	r0, r0, r5
 800465a:	6060      	str	r0, [r4, #4]
 800465c:	6863      	ldr	r3, [r4, #4]
 800465e:	6123      	str	r3, [r4, #16]
 8004660:	2300      	movs	r3, #0
 8004662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004666:	e7a7      	b.n	80045b8 <_printf_i+0x118>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	462a      	mov	r2, r5
 800466c:	4639      	mov	r1, r7
 800466e:	4630      	mov	r0, r6
 8004670:	47c0      	blx	r8
 8004672:	3001      	adds	r0, #1
 8004674:	d0aa      	beq.n	80045cc <_printf_i+0x12c>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	079b      	lsls	r3, r3, #30
 800467a:	d413      	bmi.n	80046a4 <_printf_i+0x204>
 800467c:	68e0      	ldr	r0, [r4, #12]
 800467e:	9b03      	ldr	r3, [sp, #12]
 8004680:	4298      	cmp	r0, r3
 8004682:	bfb8      	it	lt
 8004684:	4618      	movlt	r0, r3
 8004686:	e7a3      	b.n	80045d0 <_printf_i+0x130>
 8004688:	2301      	movs	r3, #1
 800468a:	464a      	mov	r2, r9
 800468c:	4639      	mov	r1, r7
 800468e:	4630      	mov	r0, r6
 8004690:	47c0      	blx	r8
 8004692:	3001      	adds	r0, #1
 8004694:	d09a      	beq.n	80045cc <_printf_i+0x12c>
 8004696:	3501      	adds	r5, #1
 8004698:	68e3      	ldr	r3, [r4, #12]
 800469a:	9a03      	ldr	r2, [sp, #12]
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	42ab      	cmp	r3, r5
 80046a0:	dcf2      	bgt.n	8004688 <_printf_i+0x1e8>
 80046a2:	e7eb      	b.n	800467c <_printf_i+0x1dc>
 80046a4:	2500      	movs	r5, #0
 80046a6:	f104 0919 	add.w	r9, r4, #25
 80046aa:	e7f5      	b.n	8004698 <_printf_i+0x1f8>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ac      	bne.n	800460a <_printf_i+0x16a>
 80046b0:	7803      	ldrb	r3, [r0, #0]
 80046b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ba:	e76c      	b.n	8004596 <_printf_i+0xf6>
 80046bc:	08004b81 	.word	0x08004b81
 80046c0:	08004b92 	.word	0x08004b92

080046c4 <_putc_r>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	460d      	mov	r5, r1
 80046c8:	4614      	mov	r4, r2
 80046ca:	4606      	mov	r6, r0
 80046cc:	b118      	cbz	r0, 80046d6 <_putc_r+0x12>
 80046ce:	6983      	ldr	r3, [r0, #24]
 80046d0:	b90b      	cbnz	r3, 80046d6 <_putc_r+0x12>
 80046d2:	f7ff fa47 	bl	8003b64 <__sinit>
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <_putc_r+0x60>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	d112      	bne.n	8004702 <_putc_r+0x3e>
 80046dc:	6874      	ldr	r4, [r6, #4]
 80046de:	68a3      	ldr	r3, [r4, #8]
 80046e0:	3b01      	subs	r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	da16      	bge.n	8004716 <_putc_r+0x52>
 80046e8:	69a2      	ldr	r2, [r4, #24]
 80046ea:	4293      	cmp	r3, r2
 80046ec:	db02      	blt.n	80046f4 <_putc_r+0x30>
 80046ee:	b2eb      	uxtb	r3, r5
 80046f0:	2b0a      	cmp	r3, #10
 80046f2:	d110      	bne.n	8004716 <_putc_r+0x52>
 80046f4:	4622      	mov	r2, r4
 80046f6:	4629      	mov	r1, r5
 80046f8:	4630      	mov	r0, r6
 80046fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046fe:	f7ff b881 	b.w	8003804 <__swbuf_r>
 8004702:	4b09      	ldr	r3, [pc, #36]	; (8004728 <_putc_r+0x64>)
 8004704:	429c      	cmp	r4, r3
 8004706:	d101      	bne.n	800470c <_putc_r+0x48>
 8004708:	68b4      	ldr	r4, [r6, #8]
 800470a:	e7e8      	b.n	80046de <_putc_r+0x1a>
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <_putc_r+0x68>)
 800470e:	429c      	cmp	r4, r3
 8004710:	bf08      	it	eq
 8004712:	68f4      	ldreq	r4, [r6, #12]
 8004714:	e7e3      	b.n	80046de <_putc_r+0x1a>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	701d      	strb	r5, [r3, #0]
 800471e:	b2e8      	uxtb	r0, r5
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	bf00      	nop
 8004724:	08004b30 	.word	0x08004b30
 8004728:	08004b50 	.word	0x08004b50
 800472c:	08004b10 	.word	0x08004b10

08004730 <_sbrk_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4c06      	ldr	r4, [pc, #24]	; (800474c <_sbrk_r+0x1c>)
 8004734:	2300      	movs	r3, #0
 8004736:	4605      	mov	r5, r0
 8004738:	4608      	mov	r0, r1
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	f7fc fc22 	bl	8000f84 <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_sbrk_r+0x1a>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	b103      	cbz	r3, 800474a <_sbrk_r+0x1a>
 8004748:	602b      	str	r3, [r5, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	2000017c 	.word	0x2000017c

08004750 <__sread>:
 8004750:	b510      	push	{r4, lr}
 8004752:	460c      	mov	r4, r1
 8004754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004758:	f000 f8e0 	bl	800491c <_read_r>
 800475c:	2800      	cmp	r0, #0
 800475e:	bfab      	itete	ge
 8004760:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004762:	89a3      	ldrhlt	r3, [r4, #12]
 8004764:	181b      	addge	r3, r3, r0
 8004766:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800476a:	bfac      	ite	ge
 800476c:	6563      	strge	r3, [r4, #84]	; 0x54
 800476e:	81a3      	strhlt	r3, [r4, #12]
 8004770:	bd10      	pop	{r4, pc}

08004772 <__swrite>:
 8004772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004776:	461f      	mov	r7, r3
 8004778:	898b      	ldrh	r3, [r1, #12]
 800477a:	05db      	lsls	r3, r3, #23
 800477c:	4605      	mov	r5, r0
 800477e:	460c      	mov	r4, r1
 8004780:	4616      	mov	r6, r2
 8004782:	d505      	bpl.n	8004790 <__swrite+0x1e>
 8004784:	2302      	movs	r3, #2
 8004786:	2200      	movs	r2, #0
 8004788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478c:	f000 f868 	bl	8004860 <_lseek_r>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	4632      	mov	r2, r6
 800479e:	463b      	mov	r3, r7
 80047a0:	4628      	mov	r0, r5
 80047a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	f000 b817 	b.w	80047d8 <_write_r>

080047aa <__sseek>:
 80047aa:	b510      	push	{r4, lr}
 80047ac:	460c      	mov	r4, r1
 80047ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b2:	f000 f855 	bl	8004860 <_lseek_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	bf15      	itete	ne
 80047bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80047be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047c6:	81a3      	strheq	r3, [r4, #12]
 80047c8:	bf18      	it	ne
 80047ca:	81a3      	strhne	r3, [r4, #12]
 80047cc:	bd10      	pop	{r4, pc}

080047ce <__sclose>:
 80047ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d2:	f000 b813 	b.w	80047fc <_close_r>
	...

080047d8 <_write_r>:
 80047d8:	b538      	push	{r3, r4, r5, lr}
 80047da:	4c07      	ldr	r4, [pc, #28]	; (80047f8 <_write_r+0x20>)
 80047dc:	4605      	mov	r5, r0
 80047de:	4608      	mov	r0, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	2200      	movs	r2, #0
 80047e4:	6022      	str	r2, [r4, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f7fc fb7b 	bl	8000ee2 <_write>
 80047ec:	1c43      	adds	r3, r0, #1
 80047ee:	d102      	bne.n	80047f6 <_write_r+0x1e>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	b103      	cbz	r3, 80047f6 <_write_r+0x1e>
 80047f4:	602b      	str	r3, [r5, #0]
 80047f6:	bd38      	pop	{r3, r4, r5, pc}
 80047f8:	2000017c 	.word	0x2000017c

080047fc <_close_r>:
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4c06      	ldr	r4, [pc, #24]	; (8004818 <_close_r+0x1c>)
 8004800:	2300      	movs	r3, #0
 8004802:	4605      	mov	r5, r0
 8004804:	4608      	mov	r0, r1
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	f7fc fb87 	bl	8000f1a <_close>
 800480c:	1c43      	adds	r3, r0, #1
 800480e:	d102      	bne.n	8004816 <_close_r+0x1a>
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	b103      	cbz	r3, 8004816 <_close_r+0x1a>
 8004814:	602b      	str	r3, [r5, #0]
 8004816:	bd38      	pop	{r3, r4, r5, pc}
 8004818:	2000017c 	.word	0x2000017c

0800481c <_fstat_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4c07      	ldr	r4, [pc, #28]	; (800483c <_fstat_r+0x20>)
 8004820:	2300      	movs	r3, #0
 8004822:	4605      	mov	r5, r0
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	f7fc fb82 	bl	8000f32 <_fstat>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d102      	bne.n	8004838 <_fstat_r+0x1c>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	b103      	cbz	r3, 8004838 <_fstat_r+0x1c>
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	bd38      	pop	{r3, r4, r5, pc}
 800483a:	bf00      	nop
 800483c:	2000017c 	.word	0x2000017c

08004840 <_isatty_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4c06      	ldr	r4, [pc, #24]	; (800485c <_isatty_r+0x1c>)
 8004844:	2300      	movs	r3, #0
 8004846:	4605      	mov	r5, r0
 8004848:	4608      	mov	r0, r1
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	f7fc fb81 	bl	8000f52 <_isatty>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_isatty_r+0x1a>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	b103      	cbz	r3, 800485a <_isatty_r+0x1a>
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	2000017c 	.word	0x2000017c

08004860 <_lseek_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4c07      	ldr	r4, [pc, #28]	; (8004880 <_lseek_r+0x20>)
 8004864:	4605      	mov	r5, r0
 8004866:	4608      	mov	r0, r1
 8004868:	4611      	mov	r1, r2
 800486a:	2200      	movs	r2, #0
 800486c:	6022      	str	r2, [r4, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fc fb7a 	bl	8000f68 <_lseek>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_lseek_r+0x1e>
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	b103      	cbz	r3, 800487e <_lseek_r+0x1e>
 800487c:	602b      	str	r3, [r5, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	2000017c 	.word	0x2000017c

08004884 <memcpy>:
 8004884:	b510      	push	{r4, lr}
 8004886:	1e43      	subs	r3, r0, #1
 8004888:	440a      	add	r2, r1
 800488a:	4291      	cmp	r1, r2
 800488c:	d100      	bne.n	8004890 <memcpy+0xc>
 800488e:	bd10      	pop	{r4, pc}
 8004890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004898:	e7f7      	b.n	800488a <memcpy+0x6>

0800489a <memmove>:
 800489a:	4288      	cmp	r0, r1
 800489c:	b510      	push	{r4, lr}
 800489e:	eb01 0302 	add.w	r3, r1, r2
 80048a2:	d807      	bhi.n	80048b4 <memmove+0x1a>
 80048a4:	1e42      	subs	r2, r0, #1
 80048a6:	4299      	cmp	r1, r3
 80048a8:	d00a      	beq.n	80048c0 <memmove+0x26>
 80048aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048b2:	e7f8      	b.n	80048a6 <memmove+0xc>
 80048b4:	4283      	cmp	r3, r0
 80048b6:	d9f5      	bls.n	80048a4 <memmove+0xa>
 80048b8:	1881      	adds	r1, r0, r2
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	42d3      	cmn	r3, r2
 80048be:	d100      	bne.n	80048c2 <memmove+0x28>
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048ca:	e7f7      	b.n	80048bc <memmove+0x22>

080048cc <__malloc_lock>:
 80048cc:	4770      	bx	lr

080048ce <__malloc_unlock>:
 80048ce:	4770      	bx	lr

080048d0 <_realloc_r>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	4607      	mov	r7, r0
 80048d4:	4614      	mov	r4, r2
 80048d6:	460e      	mov	r6, r1
 80048d8:	b921      	cbnz	r1, 80048e4 <_realloc_r+0x14>
 80048da:	4611      	mov	r1, r2
 80048dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048e0:	f7ff ba7c 	b.w	8003ddc <_malloc_r>
 80048e4:	b922      	cbnz	r2, 80048f0 <_realloc_r+0x20>
 80048e6:	f7ff fa2b 	bl	8003d40 <_free_r>
 80048ea:	4625      	mov	r5, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f0:	f000 f826 	bl	8004940 <_malloc_usable_size_r>
 80048f4:	42a0      	cmp	r0, r4
 80048f6:	d20f      	bcs.n	8004918 <_realloc_r+0x48>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4638      	mov	r0, r7
 80048fc:	f7ff fa6e 	bl	8003ddc <_malloc_r>
 8004900:	4605      	mov	r5, r0
 8004902:	2800      	cmp	r0, #0
 8004904:	d0f2      	beq.n	80048ec <_realloc_r+0x1c>
 8004906:	4631      	mov	r1, r6
 8004908:	4622      	mov	r2, r4
 800490a:	f7ff ffbb 	bl	8004884 <memcpy>
 800490e:	4631      	mov	r1, r6
 8004910:	4638      	mov	r0, r7
 8004912:	f7ff fa15 	bl	8003d40 <_free_r>
 8004916:	e7e9      	b.n	80048ec <_realloc_r+0x1c>
 8004918:	4635      	mov	r5, r6
 800491a:	e7e7      	b.n	80048ec <_realloc_r+0x1c>

0800491c <_read_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4c07      	ldr	r4, [pc, #28]	; (800493c <_read_r+0x20>)
 8004920:	4605      	mov	r5, r0
 8004922:	4608      	mov	r0, r1
 8004924:	4611      	mov	r1, r2
 8004926:	2200      	movs	r2, #0
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7fc fabc 	bl	8000ea8 <_read>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_read_r+0x1e>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_read_r+0x1e>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	2000017c 	.word	0x2000017c

08004940 <_malloc_usable_size_r>:
 8004940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004944:	1f18      	subs	r0, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	bfbc      	itt	lt
 800494a:	580b      	ldrlt	r3, [r1, r0]
 800494c:	18c0      	addlt	r0, r0, r3
 800494e:	4770      	bx	lr

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
